{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":140911,"status":"ok","timestamp":1698535214117,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"},"user_tz":300},"id":"imB2eudNjczO","outputId":"ef90b871-8e43-4434-b584-09007e6770f5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting tensorflow==2.12.0\n","  Downloading tensorflow-2.12.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (585.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m585.9/585.9 MB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (1.6.3)\n","Requirement already satisfied: flatbuffers>=2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (23.5.26)\n","Collecting gast<=0.4.0,>=0.2.1 (from tensorflow==2.12.0)\n","  Downloading gast-0.4.0-py3-none-any.whl (9.8 kB)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (0.2.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (1.59.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (3.9.0)\n","Requirement already satisfied: jax>=0.3.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (0.4.16)\n","Collecting keras<2.13,>=2.12.0 (from tensorflow==2.12.0)\n","  Downloading keras-2.12.0-py2.py3-none-any.whl (1.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (16.0.6)\n","Requirement already satisfied: numpy<1.24,>=1.22 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (1.23.5)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (23.2)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (1.16.0)\n","Collecting tensorboard<2.13,>=2.12 (from tensorflow==2.12.0)\n","  Downloading tensorboard-2.12.3-py3-none-any.whl (5.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.6/5.6 MB\u001b[0m \u001b[31m10.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting tensorflow-estimator<2.13,>=2.12.0 (from tensorflow==2.12.0)\n","  Downloading tensorflow_estimator-2.12.0-py2.py3-none-any.whl (440 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m440.7/440.7 kB\u001b[0m \u001b[31m20.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (2.3.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (4.5.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.12.0) (0.34.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow==2.12.0) (0.41.2)\n","Requirement already satisfied: ml-dtypes>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from jax>=0.3.15->tensorflow==2.12.0) (0.2.0)\n","Requirement already satisfied: scipy>=1.7 in /usr/local/lib/python3.10/dist-packages (from jax>=0.3.15->tensorflow==2.12.0) (1.11.3)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.0) (2.17.3)\n","Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.0) (1.0.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.0) (3.5)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.0) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.0) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.0) (3.0.1)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (5.3.2)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (0.3.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (3.3.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (2023.7.22)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (2.1.3)\n","Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (0.5.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow==2.12.0) (3.2.2)\n","Installing collected packages: tensorflow-estimator, keras, gast, tensorboard, tensorflow\n","  Attempting uninstall: tensorflow-estimator\n","    Found existing installation: tensorflow-estimator 2.14.0\n","    Uninstalling tensorflow-estimator-2.14.0:\n","      Successfully uninstalled tensorflow-estimator-2.14.0\n","  Attempting uninstall: keras\n","    Found existing installation: keras 2.14.0\n","    Uninstalling keras-2.14.0:\n","      Successfully uninstalled keras-2.14.0\n","  Attempting uninstall: gast\n","    Found existing installation: gast 0.5.4\n","    Uninstalling gast-0.5.4:\n","      Successfully uninstalled gast-0.5.4\n","  Attempting uninstall: tensorboard\n","    Found existing installation: tensorboard 2.14.1\n","    Uninstalling tensorboard-2.14.1:\n","      Successfully uninstalled tensorboard-2.14.1\n","  Attempting uninstall: tensorflow\n","    Found existing installation: tensorflow 2.14.0\n","    Uninstalling tensorflow-2.14.0:\n","      Successfully uninstalled tensorflow-2.14.0\n","Successfully installed gast-0.4.0 keras-2.12.0 tensorboard-2.12.3 tensorflow-2.12.0 tensorflow-estimator-2.12.0\n"]}],"source":["pip install tensorflow==2.12.0"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"vkHHUZ_7jqY9","executionInfo":{"status":"ok","timestamp":1698535227141,"user_tz":300,"elapsed":13042,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["# libraries\n","import os\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.base import BaseEstimator\n","import time\n","\n","#Visualizers\n","from yellowbrick.classifier import ClassificationReport\n","from yellowbrick.classifier import ClassPredictionError\n","from yellowbrick.classifier import ConfusionMatrix\n","from yellowbrick.classifier import ROCAUC\n","from yellowbrick.classifier import PrecisionRecallCurve\n","import matplotlib.pyplot as plt\n","\n","#Metrics\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import cohen_kappa_score\n","from sklearn.metrics import hamming_loss\n","from sklearn.metrics import log_loss\n","from sklearn.metrics import zero_one_loss\n","from sklearn.metrics import matthews_corrcoef\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import classification_report\n","\n","#Classifiers\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn import svm\n","from sklearn.ensemble import ExtraTreesClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import recall_score\n","\n","#Neural Network\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Dense,LSTM\n","from tensorflow.keras.layers import Conv1D\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.optimizers import RMSprop\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.wrappers.scikit_learn import KerasClassifier\n","from tensorflow.keras.layers import Lambda, Layer, ReLU\n","from keras.models import load_model\n","import tensorflow as tf\n","from tensorflow.keras.losses import sparse_categorical_crossentropy\n","from tensorflow.keras.layers import BatchNormalization\n","from tensorflow.keras.layers import Conv1D, GlobalMaxPooling1D,Concatenate\n","\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"A3NCLwWgju95","executionInfo":{"status":"ok","timestamp":1698535227159,"user_tz":300,"elapsed":91,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["from keras import optimizers"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"d-T8GPpqjxNc","executionInfo":{"status":"ok","timestamp":1698535227160,"user_tz":300,"elapsed":89,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["import tensorflow\n","import os\n","import tensorflow as tf\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Conv2D, Dense, Input, Reshape, Lambda, Layer, Flatten, BatchNormalization,AveragePooling2D\n","from tensorflow.keras import backend as K\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from keras.datasets import mnist\n","\n","from keras import initializers\n","\n","from keras.utils import to_categorical\n","from keras.layers.core import Activation"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24991,"status":"ok","timestamp":1698535252064,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"},"user_tz":300},"id":"5R8LRxaDjye6","outputId":"16eab7f0-64d0-4545-eb63-b66f77917a40"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":55,"metadata":{"id":"xfGAWP_CjzvP","executionInfo":{"status":"ok","timestamp":1698535726015,"user_tz":300,"elapsed":261,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["data_path6 = '/content/drive/MyDrive/AlzheimerCodesDatosPlanos/BasesDeDatos/ADNI/ADNIMERGE.csv'\n","figures_path = './figures'"]},{"cell_type":"code","execution_count":56,"metadata":{"id":"fE-5o8YFkUzU","executionInfo":{"status":"ok","timestamp":1698535727752,"user_tz":300,"elapsed":240,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["Data = pd.read_csv(data_path6)"]},{"cell_type":"code","execution_count":57,"metadata":{"id":"XpyDXKtxkVUk","executionInfo":{"status":"ok","timestamp":1698535728854,"user_tz":300,"elapsed":7,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["df=Data[[\"AGE\",\"PTGENDER\",\"PTEDUCAT\", \"PTMARRY\",\"APOE4\",\n","        \"ADAS11\",\"ADAS13\",\"ADASQ4\",\"MMSE\",\"FAQ\", \"MOCA\",\n","        \"CDRSB\",\"RAVLT_immediate\",\"RAVLT_learning\",\"RAVLT_forgetting\",\n","        \"RAVLT_perc_forgetting\",\"LDELTOTAL\", \"TRABSCOR\",\"mPACCdigit\"\n","        ,\"mPACCtrailsB\",\"Ventricles\", \"Hippocampus\",\"WholeBrain\", \"Entorhinal\",\n","        \"Fusiform\", \"MidTemp\", \"ICV\",\"DX_bl\"]]"]},{"cell_type":"code","execution_count":58,"metadata":{"id":"9-AU1VHWkXkf","executionInfo":{"status":"ok","timestamp":1698535731010,"user_tz":300,"elapsed":3,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["from sklearn.preprocessing import LabelEncoder"]},{"cell_type":"code","execution_count":59,"metadata":{"id":"Xr8g3ixTkapR","executionInfo":{"status":"ok","timestamp":1698535734329,"user_tz":300,"elapsed":280,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["LabelEncoder_1=LabelEncoder()\n","df[\"PTGENDER\"]=LabelEncoder_1.fit_transform(df[\"PTGENDER\"])\n","LabelEncoder_1=LabelEncoder()\n","df[\"PTMARRY\"]=LabelEncoder_1.fit_transform(df[\"PTMARRY\"])"]},{"cell_type":"code","execution_count":60,"metadata":{"id":"fYwDga-nkcZT","executionInfo":{"status":"ok","timestamp":1698535737882,"user_tz":300,"elapsed":376,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["df.drop(df[df['DX_bl']==\"SMC\"].index,inplace=True)\n","df.drop(df[df['DX_bl']==\"LMCI\"].index,inplace=True)"]},{"cell_type":"code","execution_count":61,"metadata":{"id":"JMV2Gei1lyji","colab":{"base_uri":"https://localhost:8080/","height":624},"executionInfo":{"status":"error","timestamp":1698535739344,"user_tz":300,"elapsed":368,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"651abe74-2aa3-4e15-afaa-a65be2e85b2d"},"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3801\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3802\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.Int64HashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.Int64HashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 5","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-61-1ddf6d220473>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'DX_bl'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0;32mif\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'DX_bl'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m\"CN\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'DX_bl'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'DX_bl'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m\"EMCI\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'DX_bl'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    979\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    980\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mkey_is_scalar\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 981\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    982\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    983\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_hashable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, label, takeable)\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m         \u001b[0;31m# Similar to Index.get_value, but we do not fall back to positional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1089\u001b[0;31m         \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1090\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values_for_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1091\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3802\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3804\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3805\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 5"]}],"source":["for i in range(len(df['DX_bl'])):\n","  if df['DX_bl'][i]==\"CN\":\n","    df['DX_bl'][i]=0\n","  if df['DX_bl'][i]==\"EMCI\":\n","    df['DX_bl'][i]=1\n","  if df['DX_bl'][i]==\"LMCI\":\n","    df['DX_bl'][i]=2\n","  if df['DX_bl'][i]==\"AD\":\n","    df['DX_bl'][i]=3"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"-vl0zA-0l579","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698535637147,"user_tz":300,"elapsed":280,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"07b60626-79b4-435c-dbdd-916969f0c781"},"outputs":[{"output_type":"stream","name":"stdout","text":["Features shape: (1846, 28)\n","Labels shape: (1846,)\n"]}],"source":["Labels = df['DX_bl'].values\n","Features = df.drop(['DX_bl'],axis=1).values\n","\n","\n","print('Features shape:', Features.shape)\n","print('Labels shape:', Labels.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1XCFoG38QHG"},"outputs":[],"source":["#Write function for class-centric metrics\n","# Classification report\n","def CR_viz():\n","    def Class_report(model,classes):\n","        visualizer = ClassificationReport(model, classes=classes, support=True)\n","        train_start_time = time.time()\n","        visualizer.fit(X_train, y_train)  # Fit the visualizer and the model\n","        print(f'Train runtime: {time.time()-train_start_time}')\n","        test_start_time = time.time()\n","        visualizer.score(X_test, y_test)  # Evaluate the model on the test data\n","        print(f'Test runtime: {time.time()-test_start_time}')\n","        return visualizer.poof()\n","    for name, classifier in zip(names, classifiers):\n","        fig, ax = plt.subplots(nrows=1, ncols=1 )\n","        Class_report(classifier,classes)\n","        #fig.savefig(figures_path+\"/\"+str(len(classes))+\"FP/\"+name+\"_CR.pdf\")\n","\n","#Class Prediction Error\n","def CPE_viz():\n","    def CPE(model,classes):\n","        visualizer = ClassPredictionError(model, classes=classes)\n","        visualizer.fit(X_train, y_train)  # Fit the visualizer and the model\n","        visualizer.score(X_test, y_test)  # Evaluate the model on the test data\n","        return visualizer.poof()\n","    for name, classifier in zip(names, classifiers):\n","        fig, ax = plt.subplots(nrows=1, ncols=1 )\n","        CPE(classifier,classes)\n","        #fig.savefig(figures_path+\"/\"+str(len(classes))+\"FP/\"+name+\"_CPE.pdf\")\n","\n","#Confusion matrix\n","def CM_viz():\n","    def CM(model,classes):\n","        visualizer = ConfusionMatrix(model, classes=classes, percent=True)\n","        visualizer.fit(X_train, y_train)  # Fit the visualizer and the model\n","        visualizer.score(X_test, y_test)  # Evaluate the model on the test data\n","        return visualizer.poof()\n","    for name, classifier in zip(names, classifiers):\n","        fig, ax = plt.subplots(nrows=1, ncols=1 )\n","        CM(classifier,classes)\n","        #fig.savefig(figures_path+\"/\"+str(len(classes))+\"FP/\"+name+\"_CM.pdf\")\n","\n","#ROC-AUC\n","def ROC_viz():\n","    def ROC(model,classes):\n","        visualizer = ROCAUC(model, classes=classes)\n","        visualizer.fit(X_train, y_train)  # Fit the visualizer and the model\n","        visualizer.score(X_test, y_test)  # Evaluate the model on the test data\n","        return visualizer.poof()\n","    for name, classifier in zip(names, classifiers):\n","        fig, ax = plt.subplots(nrows=1, ncols=1 )\n","        ROC(classifier,classes)\n","        #fig.savefig(figures_path+\"/\"+str(len(classes))+\"FP/\"+name+\"_ROC.pdf\")\n","\n","#Precision Recall Curve\n","def PRC_viz():\n","    def PRC(model,classes):\n","        visualizer = PrecisionRecallCurve(model,classes=classes, per_class=True, iso_f1_curves=False,\n","    fill_area=False, micro=False)\n","        visualizer.fit(X_train, y_train)  # Fit the visualizer and the model\n","        visualizer.score(X_test, y_test)  # Evaluate the model on the test data\n","        return visualizer.poof()\n","    for name, classifier in zip(names, classifiers):\n","        fig, ax = plt.subplots(nrows=1, ncols=1 )\n","        PRC(classifier,classes)\n","        #fig.savefig(figures_path+\"/\"+str(len(classes))+\"FP/\"+name+\"_PRC.pdf\")"]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(Features, Labels, test_size=0.2, stratify=Labels, random_state=42)\n","\n","print('Train data shape:', X_train.shape)\n","print('Train labels shape:', y_train.shape)\n","print('Test data shape:', X_test.shape)\n","print('Test labels shape:', y_test.shape)"],"metadata":{"id":"Ht1A-OtoILi1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698535456024,"user_tz":300,"elapsed":248,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"1d49c976-1d19-4fc0-a969-4e29a38ce44b"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Train data shape: (1476, 28)\n","Train labels shape: (1476,)\n","Test data shape: (370, 28)\n","Test labels shape: (370,)\n"]}]},{"cell_type":"code","source":["scaler = StandardScaler().fit(X_train)\n","\n","X_train = scaler.transform(X_train)\n","X_test = scaler.transform(X_test)"],"metadata":{"id":"xkqvM9xMmmoN","executionInfo":{"status":"ok","timestamp":1698535490233,"user_tz":300,"elapsed":238,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["X_train=np.expand_dims(X_train, axis=-1)\n","X_test=np.expand_dims(X_test, axis=-1)"],"metadata":{"id":"ooYAFiQQmpAc","executionInfo":{"status":"ok","timestamp":1698535491672,"user_tz":300,"elapsed":3,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","execution_count":31,"metadata":{"id":"W81HjWZ2mK3U","executionInfo":{"status":"ok","timestamp":1698535493185,"user_tz":300,"elapsed":4,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}}},"outputs":[],"source":["classes = [0, 1, 2,3]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w5eM7ZC28Sym"},"outputs":[],"source":["# Write function for aggregate metrics\n","def classifier_metrics():\n","    def metrics(model):\n","        #     model=model_name()\n","        model.fit(X_train, y_train)  # Fit the visualizer and the model\n","        y_pred = model.predict(X_test)\n","       # model.save('modeloEpilepsia.h5')\n","        try:\n","            y_prob = model.predict_proba(X_test)\n","            log_metric = log_loss(y_test,y_prob)\n","        except:\n","            y_prob = \"Not probablistic\"\n","            log_metric = 0\n","        else:\n","            y_pred = model.predict(X_test)\n","\n","        acc_score=accuracy_score(y_test,y_pred)\n","        clc=classification_report(y_test, y_pred,labels=[1, 2, 3],digits=4)\n","        print(clc)\n","        print('accuracy_score: {0:.4f}'.format(acc_score))\n","    for name in classifiers:\n","        print (str(name))\n","        metrics(name)\n","        print()\n","        print (\"---------------------------------------------------------------------------------\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vxEf0Cma3hE9"},"outputs":[],"source":["from keras.layers import GlobalAveragePooling2D,ReLU\n","num_clases=3\n","vec=16\n","class DigitCapsuleLayer(Layer):\n","    # creating a layer class in keras\n","    def __init__(self, **kwargs):\n","        super(DigitCapsuleLayer, self).__init__(**kwargs)\n","        self.kernel_initializer = initializers.get('glorot_uniform')\n","\n","    def build(self, input_shape):\n","        # initialize weight matrix for each capsule in lower layer\n","        self.W = self.add_weight(shape = [1,1,num_clases, vec, 256], initializer = self.kernel_initializer, name = 'weights') #:c\n","        self.built = True\n","\n","    def call(self, inputs):\n","        #print(inputs.shape)\n","        u = tf.reshape(inputs, (-1, 1, 256)) # u.shape: (None, 1152, 8) #:c\n","\n","        u = tf.expand_dims(u, axis=-2) # u.shape: (None, 1152, 1, 8)\n","        #print(u.shape)\n","        u = tf.expand_dims(u, axis=-1) # u.shape: (None, 1152, 1, 8, 1)\n","        u_hat = tf.matmul(self.W, u) # u_hat.shape: (None, 1152, 10, 16, 1)\n","        u_hat = tf.squeeze(u_hat, [4]) # u_hat.shape: (None, 1152, 10, 16)\n","        b = tf.zeros(shape = [K.shape(inputs)[0],2, num_clases, 1])\n","\n","# routing algorithm with updating coupling coefficient c, using scalar product b/w input capsule and output capsule\n","        for i in range(3-1):\n","            c = tf.nn.softmax(b, axis=-2) # c.shape: (None, 1152, 10, 1)\n","            s = tf.reduce_sum(tf.multiply(c, u_hat), axis=1, keepdims=True) # s.shape: (None, 1, 10, 16)\n","            v = squash(s) # v.shape: (None, 1, 10, 16)\n","            agreement = tf.squeeze(tf.matmul(tf.expand_dims(u_hat, axis=-1), tf.expand_dims(v, axis=-1), transpose_a=True), [4]) # agreement.shape: (None, 1152, 10, 1)\n","            b += agreement\n","\n","        return v\n","\n","    def compute_output_shape(self, input_shape):\n","        return tuple([None, num_clases, vec])\n","\n","epsilon = 1e-7\n","\n","def output_layer(inputs):\n","    return K.sqrt(K.sum(K.square(inputs), -1) + K.epsilon())\n","\n","def squash(inputs):\n","    # take norm of input vectors\n","    squared_norm = tf.keras.backend.sum(tf.keras.backend.square(inputs), axis = -1, keepdims = True)\n","\n","    # use the formula for non-linear function to return squashed output\n","    return ((squared_norm/(1+squared_norm))/(K.sqrt(squared_norm+K.epsilon())))*inputs\n","\n","def safe_norm(v, axis=-1, epsilon=1e-7):\n","    v_ = tf.reduce_sum(tf.square(v), axis = axis, keepdims=True)\n","    return tf.sqrt(v_ + epsilon)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KuoDu1HJ8WIv"},"outputs":[],"source":["\n","\n","class KerasBatchClassifier(KerasClassifier, BaseEstimator):\n","    def __init__(self, model, **kwargs):\n","        super().__init__(model)\n","        self.fit_kwargs = kwargs\n","        self._estimator_type = 'classifier'\n","\n","    def fit(self, x, y, *args, **kwargs):\n","        y = np.array(y)\n","        if len(y.shape) == 2 and y.shape[1] > 1:\n","          self.classes_ = np.arange(y.shape[1])\n","        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) == 1:\n","          self.classes_ = np.unique(y)\n","          y = np.searchsorted(self.classes_, y)\n","        else:\n","          raise ValueError('Invalid shape for y: ' + str(y.shape))\n","        self.n_classes_ = len(self.classes_)\n","        return super(KerasClassifier, self).fit(x, y, **self.fit_kwargs)\n","\n","\n","# RED NEURONAL\n","def FullyConnected():\n","\n","\n","  inputs = Input(shape=(X_train.shape[1],1), name=\"input_1\")\n","\n","\n","  Layer_1=tf.keras.layers.Conv1D(8,3,activation=\"selu\",padding=\"same\")(inputs)\n","\n","\n","#16\n","\n","  Layer_1=tf.keras.layers.Conv1D(16,3,activation=\"selu\",padding=\"same\")(Layer_1)\n","\n","#32\n","\n","  Layer_1=tf.keras.layers.Conv1D(32,3,activation=\"selu\",padding=\"same\")(Layer_1)\n","  Pool_1=tf.keras.layers.MaxPool1D(2)(Layer_1)\n","  Pool_1=tf.keras.layers.Dropout(rate=0.5)(Pool_1)\n","\n","#64\n","\n","  Layer_1=tf.keras.layers.Conv1D(64,3,activation=\"selu\",padding=\"same\")(Pool_1)\n","  Pool_1=tf.keras.layers.MaxPool1D(2)(Layer_1)\n","  Pool_1=tf.keras.layers.Dropout(rate=0.5)(Pool_1)\n","\n","#128\n","\n","  Layer_1=tf.keras.layers.Conv1D(128,3,activation=\"selu\",padding=\"same\")(Pool_1)\n","  Pool_1=tf.keras.layers.MaxPool1D(2)(Layer_1)\n","  Pool_1=tf.keras.layers.Dropout(rate=0.5)(Pool_1)\n","\n","#256\n","\n","  Layer_1=tf.keras.layers.Conv1D(256,3,activation=\"selu\",padding=\"same\")(Pool_1)\n","  Pool_1=tf.keras.layers.MaxPool1D(2)(Layer_1)\n","  Pool_1=tf.keras.layers.Dropout(rate=0.5)(Pool_1)\n","\n","  squashed_output = tf.keras.layers.Lambda(squash)(Pool_1)\n","  digit_caps = DigitCapsuleLayer()(squashed_output)\n","  Acont= safe_norm(digit_caps)\n","  mast = tf.reshape(Acont, (-1,Acont.shape[2],Acont.shape[3]))\n","  outputs = tf.keras.layers.Lambda(output_layer)(mast)\n","  model = Model(inputs = inputs, outputs = outputs)\n","\n","  optimizer=Adam(learning_rate=0.001)\n","  model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n","  return model"]},{"cell_type":"code","source":["#Grad camp\n","class KerasBatchClassifier(KerasClassifier, BaseEstimator):\n","    def __init__(self, model, **kwargs):\n","        super().__init__(model)\n","        self.fit_kwargs = kwargs\n","        self._estimator_type = 'classifier'\n","\n","    def fit(self, x, y, *args, **kwargs):\n","        y = np.array(y)\n","        if len(y.shape) == 2 and y.shape[1] > 1:\n","          self.classes_ = np.arange(y.shape[1])\n","        elif (len(y.shape) == 2 and y.shape[1] == 1) or len(y.shape) == 1:\n","          self.classes_ = np.unique(y)\n","          y = np.searchsorted(self.classes_, y)\n","        else:\n","          raise ValueError('Invalid shape for y: ' + str(y.shape))\n","        self.n_classes_ = len(self.classes_)\n","        return super(KerasClassifier, self).fit(x, y, **self.fit_kwargs)\n","\n","\n","# RED NEURONAL\n","def FullyConnected():\n","  inputs = Input(shape=(X_train.shape[1],1), name=\"input_1\")\n","  Layer_1=tf.keras.layers.Conv1D(8,3,activation=\"selu\",padding=\"same\")(inputs)\n","#16\n","  Layer_1=tf.keras.layers.Conv1D(16,3,activation=\"selu\",padding=\"same\")(Layer_1)\n","#32\n","  Layer_1=tf.keras.layers.Conv1D(32,3,activation=\"selu\",padding=\"same\")(Layer_1)\n","  Pool_1=tf.keras.layers.MaxPool1D(2)(Layer_1)\n","  Pool_1=tf.keras.layers.Dropout(rate=0.5)(Pool_1)\n","#64\n","  Layer_1=tf.keras.layers.Conv1D(64,3,activation=\"selu\",padding=\"same\")(Pool_1)\n","  Pool_1=tf.keras.layers.MaxPool1D(2)(Layer_1)\n","  Pool_1=tf.keras.layers.Dropout(rate=0.5)(Pool_1)\n","#128\n","  Layer_1=tf.keras.layers.Conv1D(128,3,activation=\"selu\",padding=\"same\")(Pool_1)\n","  Pool_1=tf.keras.layers.MaxPool1D(2)(Layer_1)\n","  Pool_1=tf.keras.layers.Dropout(rate=0.5)(Pool_1)\n","#256\n","  Layer_1=tf.keras.layers.Conv1D(256,3,activation=\"selu\",padding=\"same\")(Pool_1)\n","  Pool_1=tf.keras.layers.MaxPool1D(2)(Layer_1)\n","  Pool_1=tf.keras.layers.Dropout(rate=0.5)(Pool_1)\n","  x = tf.keras.layers.GlobalAveragePooling1D()(layers)\n","  layers = tf.keras.layers.Flatten()(x)\n","  layers = tf.keras.layers.Dropout(rate=0.5)(layers)\n","  layers = tf.keras.layers.Dense(1024 ,activation=\"relu\")(layers)\n","  layers = tf.keras.layers.Dropout(rate=0.5)(layers)\n","  layers = tf.keras.layers.Dense( 512,activation=\"relu\")(layers)\n","  layers = tf.keras.layers.Dense( 64,activation=\"relu\")(layers)\n","  predictions = tf.keras.layers.Dense(2, activation=\"softmax\", name=\"output_1\")(layers)\n","  model = Model(inputs = inputs, outputs = predictions)\n","\n","  optimizer=Adam(learning_rate=0.001)\n","  model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n","  return model"],"metadata":{"id":"2q9Rm7Ofc5FE"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AapPPQSlmUbV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696715966269,"user_tz":300,"elapsed":1132,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"6fc8ef19-bd4e-4818-c16d-6581bcc45a60"},"outputs":[{"output_type":"stream","name":"stdout","text":["input_1\n","conv1d\n","conv1d_1\n","conv1d_2\n","max_pooling1d\n","dropout\n","conv1d_3\n","max_pooling1d_1\n","dropout_1\n","conv1d_4\n","max_pooling1d_2\n","dropout_2\n","conv1d_5\n","max_pooling1d_3\n","dropout_3\n","lambda\n","digit_capsule_layer\n","tf.math.square\n","tf.math.reduce_sum\n","tf.__operators__.add\n","tf.math.sqrt\n","tf.reshape\n","lambda_1\n"]}],"source":["import tensorflow as tf\n","\n","model=FullyConnected()\n","\n","# Itera a través de las capas del modelo e imprime sus nombres\n","for layer in model.layers:\n","    print(layer.name)"]},{"cell_type":"markdown","source":["#8\n","\n","\n","\n"],"metadata":{"id":"VZ1xpjpVJ0k8"}},{"cell_type":"code","source":["def prom(layer_name,b,c):\n","  conv_layer = model.get_layer(layer_name)\n","  suma=0\n","  intermediate_model = tf.keras.Model(inputs=model.input, outputs=conv_layer.output)\n","  sample_data = X_test[b]\n","  activations1 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  sample_data = X_test[c]\n","  activations2 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  num_filters = activations2.shape[-1]\n","  for i in range(num_filters):\n","    correlation = np.corrcoef(activations1[0, :, i], activations2[0, :, i])[0, 1]\n","    suma=suma+correlation\n","  promedio=suma/num_filters\n","  return(promedio)"],"metadata":{"id":"rbRbqp_0jm1Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["capa=\"conv1d\""],"metadata":{"id":"5q1bCM4HVMZD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##CN vs EMCI"],"metadata":{"id":"LprpkaqGKT9v"}},{"cell_type":"code","source":["promedio=prom(capa,0,5)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,6)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,10)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,14)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,16)\n","print(\"E: \",promedio)"],"metadata":{"id":"Nj7KUVwiyOaK","executionInfo":{"status":"ok","timestamp":1696716228869,"user_tz":300,"elapsed":1229,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b07911c0-a889-450a-a5e8-7e8f1463932e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 123ms/step\n","1/1 [==============================] - 0s 34ms/step\n","A:  0.4030084698429683\n","1/1 [==============================] - 0s 87ms/step\n","1/1 [==============================] - 0s 39ms/step\n","B:  0.5443865855169736\n","1/1 [==============================] - 0s 82ms/step\n","1/1 [==============================] - 0s 33ms/step\n","C:  -0.3037724628118813\n","1/1 [==============================] - 0s 119ms/step\n","1/1 [==============================] - 0s 42ms/step\n","D:  -0.05819510969069093\n","1/1 [==============================] - 0s 92ms/step\n","1/1 [==============================] - 0s 39ms/step\n","E:  0.2618199938710001\n"]}]},{"cell_type":"code","source":["print(y_test[0],y_test[5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IlGXqdwZKJ8g","executionInfo":{"status":"ok","timestamp":1696716228869,"user_tz":300,"elapsed":4,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"be480643-833c-4ce6-d527-f8f836c5eab1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 1\n"]}]},{"cell_type":"code","source":["y_train[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xutLII3HKkxw","executionInfo":{"status":"ok","timestamp":1696716228870,"user_tz":300,"elapsed":4,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"c63977d7-e69d-4ff8-b881-d30e0b4d80b7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":45}]},{"cell_type":"markdown","source":["##CN vs LMCI\n"],"metadata":{"id":"BFKkJOuwOBpg"}},{"cell_type":"code","source":["promedio=prom(capa,0,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_A2SKrz-OFn4","executionInfo":{"status":"ok","timestamp":1696716230827,"user_tz":300,"elapsed":1960,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"8da755bc-cc60-41d2-edc4-6838f45c18f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 94ms/step\n","1/1 [==============================] - 0s 37ms/step\n","A:  -0.4301988221616354\n","1/1 [==============================] - 0s 118ms/step\n","1/1 [==============================] - 0s 38ms/step\n","B:  -0.4655943223687192\n","1/1 [==============================] - 0s 128ms/step\n","1/1 [==============================] - 0s 36ms/step\n","C:  -0.08194086878409856\n","1/1 [==============================] - 0s 80ms/step\n","1/1 [==============================] - 0s 32ms/step\n","D:  0.6961826658352488\n","1/1 [==============================] - 0s 94ms/step\n","1/1 [==============================] - 0s 45ms/step\n","E:  -0.3286337015713473\n"]}]},{"cell_type":"markdown","source":["##Cn vs AD"],"metadata":{"id":"ozMWOF34OP1_"}},{"cell_type":"code","source":["promedio=prom(capa,0,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kSC5wOqpOSW8","executionInfo":{"status":"ok","timestamp":1696716232338,"user_tz":300,"elapsed":1515,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"34803f64-36e4-4da4-b61d-bdab17b825b2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 160ms/step\n","1/1 [==============================] - 0s 73ms/step\n","A:  -0.49285719879409473\n","1/1 [==============================] - 0s 85ms/step\n","1/1 [==============================] - 0s 37ms/step\n","B:  -0.6169504763680858\n","1/1 [==============================] - 0s 79ms/step\n","1/1 [==============================] - 0s 33ms/step\n","C:  0.5925940209375022\n","1/1 [==============================] - 0s 128ms/step\n","1/1 [==============================] - 0s 36ms/step\n","D:  -0.5753675227017835\n","1/1 [==============================] - 0s 88ms/step\n","1/1 [==============================] - 0s 33ms/step\n","E:  -0.38566501157203065\n"]}]},{"cell_type":"markdown","source":["##EMCI vs LMCI"],"metadata":{"id":"pmCl4rvGWH1B"}},{"cell_type":"code","source":["promedio=prom(capa,5,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eT8WeoNDWMT8","executionInfo":{"status":"ok","timestamp":1696716233923,"user_tz":300,"elapsed":1588,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"8ac49894-91f3-460f-e799-7f8b45450603"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 87ms/step\n","1/1 [==============================] - 0s 34ms/step\n","A:  -0.6768186827675386\n","1/1 [==============================] - 0s 93ms/step\n","1/1 [==============================] - 0s 50ms/step\n","B:  -0.3794105901801293\n","1/1 [==============================] - 0s 93ms/step\n","1/1 [==============================] - 0s 38ms/step\n","C:  -0.01716555728461517\n","1/1 [==============================] - 0s 102ms/step\n","1/1 [==============================] - 0s 36ms/step\n","D:  0.11304550339488126\n","1/1 [==============================] - 0s 107ms/step\n","1/1 [==============================] - 0s 35ms/step\n","E:  -0.17987709575294042\n"]}]},{"cell_type":"markdown","source":["##EMCI vs AD"],"metadata":{"id":"ZA3JUQCFWNjv"}},{"cell_type":"code","source":["promedio=prom(capa,5,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qh5IwMKpWRiz","executionInfo":{"status":"ok","timestamp":1696716236088,"user_tz":300,"elapsed":2168,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"3428ebda-9ead-44da-9db4-7a9df634461d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 99ms/step\n","1/1 [==============================] - 0s 36ms/step\n","A:  -0.5119176870427217\n","1/1 [==============================] - 0s 87ms/step\n","1/1 [==============================] - 0s 43ms/step\n","B:  -0.4125496755444854\n","1/1 [==============================] - 0s 117ms/step\n","1/1 [==============================] - 0s 56ms/step\n","C:  -0.1049906723680377\n","1/1 [==============================] - 0s 114ms/step\n","1/1 [==============================] - 0s 54ms/step\n","D:  -0.2733850172228722\n","1/1 [==============================] - 0s 118ms/step\n","1/1 [==============================] - 0s 47ms/step\n","E:  -0.6898285339096716\n"]}]},{"cell_type":"markdown","source":["##LMCI vs AD"],"metadata":{"id":"JgRc0Rb8WT0e"}},{"cell_type":"code","source":["promedio=prom(capa,2,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,3,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,4,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,7,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,12,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UiMOiT0sWWMK","executionInfo":{"status":"ok","timestamp":1696716238003,"user_tz":300,"elapsed":1924,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"2ab9d44b-de9f-438b-b50f-47985b9e1521"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 130ms/step\n","1/1 [==============================] - 0s 63ms/step\n","A:  0.6467448716144452\n","1/1 [==============================] - 0s 133ms/step\n","1/1 [==============================] - 0s 57ms/step\n","B:  0.7448767472414178\n","1/1 [==============================] - 0s 110ms/step\n","1/1 [==============================] - 0s 77ms/step\n","C:  0.3217066025924688\n","1/1 [==============================] - 0s 135ms/step\n","1/1 [==============================] - 0s 53ms/step\n","D:  -0.675127945038747\n","1/1 [==============================] - 0s 139ms/step\n","1/1 [==============================] - 0s 77ms/step\n","E:  -0.09765120087094391\n"]}]},{"cell_type":"markdown","source":["#64\n","\n","\n","\n"],"metadata":{"id":"Nhov81dCiZfb"}},{"cell_type":"code","source":["capa=\"conv1d_3\""],"metadata":{"id":"-H2ejIu1iZf2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def prom(layer_name,b,c):\n","  conv_layer = model.get_layer(layer_name)\n","  suma=0\n","  intermediate_model = tf.keras.Model(inputs=model.input, outputs=conv_layer.output)\n","  sample_data = X_test[b]\n","  activations1 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  sample_data = X_test[c]\n","  activations2 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  num_filters = activations2.shape[-1]\n","  for i in range(num_filters):\n","    correlation = np.corrcoef(activations1[0, :, i], activations2[0, :, i])[0, 1]\n","    suma=suma+correlation\n","  promedio=suma/num_filters\n","  return(promedio)"],"metadata":{"id":"s6Obe31Cjph6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##CN vs EMCI"],"metadata":{"id":"bAd7VkaLiZf2"}},{"cell_type":"code","source":["promedio=prom(capa,0,5)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,6)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,10)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,14)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,16)\n","print(\"E: \",promedio)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1696716254432,"user_tz":300,"elapsed":3681,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a1e2267a-f409-4288-80d7-fac53873c7b6","id":"a_KFA9obiZf3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 158ms/step\n","1/1 [==============================] - 0s 35ms/step\n","A:  0.30204782995095236\n","1/1 [==============================] - 0s 177ms/step\n","1/1 [==============================] - 0s 48ms/step\n","B:  0.5062096384070248\n","1/1 [==============================] - 0s 217ms/step\n","1/1 [==============================] - 0s 47ms/step\n","C:  -0.03853542203362675\n","1/1 [==============================] - 0s 337ms/step\n","1/1 [==============================] - 0s 75ms/step\n","D:  -0.11913674700670993\n","1/1 [==============================] - 0s 484ms/step\n","1/1 [==============================] - 0s 92ms/step\n","E:  0.062137077257864534\n"]}]},{"cell_type":"markdown","source":["##CN vs LMCI\n"],"metadata":{"id":"nGCaqX0siZf4"}},{"cell_type":"code","source":["promedio=prom(capa,0,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716258473,"user_tz":300,"elapsed":4087,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"50d53e8b-0839-4618-ce0d-5e48caa0f752","id":"1ryn9FExiZf4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 393ms/step\n","1/1 [==============================] - 0s 92ms/step\n","A:  0.03996935299221308\n","1/1 [==============================] - 0s 403ms/step\n","1/1 [==============================] - 0s 82ms/step\n","B:  -0.20837933696138528\n","1/1 [==============================] - 0s 384ms/step\n","1/1 [==============================] - 0s 75ms/step\n","C:  -0.2042886907357788\n","1/1 [==============================] - 0s 355ms/step\n","1/1 [==============================] - 0s 61ms/step\n","D:  0.6251211731260075\n","1/1 [==============================] - 0s 374ms/step\n","1/1 [==============================] - 0s 60ms/step\n","E:  -0.16850387436016742\n"]}]},{"cell_type":"markdown","source":["##Cn vs AD"],"metadata":{"id":"7RP6gc29iZf5"}},{"cell_type":"code","source":["promedio=prom(capa,0,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716261539,"user_tz":300,"elapsed":3109,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"657e93ce-9a03-46c5-c7ea-1c13c41d85f1","id":"dea6Oz9WiZf5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 390ms/step\n","1/1 [==============================] - 0s 56ms/step\n","A:  -0.2573990048640971\n","1/1 [==============================] - 0s 331ms/step\n","1/1 [==============================] - 0s 73ms/step\n","B:  -0.15340255977036876\n","1/1 [==============================] - 0s 279ms/step\n","1/1 [==============================] - 0s 73ms/step\n","C:  0.5026390134111792\n","1/1 [==============================] - 0s 297ms/step\n","1/1 [==============================] - 0s 36ms/step\n","D:  -0.2602613557001852\n","1/1 [==============================] - 0s 151ms/step\n","1/1 [==============================] - 0s 39ms/step\n","E:  0.08642821406313826\n"]}]},{"cell_type":"markdown","source":["##EMCI vs LMCI"],"metadata":{"id":"2u7S2PmCiZf6"}},{"cell_type":"code","source":["promedio=prom(capa,5,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716263685,"user_tz":300,"elapsed":2148,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"e026aef6-f841-430b-cb7f-400092316375","id":"Y6V-SyAhiZf6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 169ms/step\n","1/1 [==============================] - 0s 39ms/step\n","A:  -0.18653905512056904\n","1/1 [==============================] - 0s 160ms/step\n","1/1 [==============================] - 0s 38ms/step\n","B:  -0.1835310719799323\n","1/1 [==============================] - 0s 195ms/step\n","1/1 [==============================] - 0s 42ms/step\n","C:  0.09214829965625858\n","1/1 [==============================] - 0s 156ms/step\n","1/1 [==============================] - 0s 62ms/step\n","D:  -0.049887102342468514\n","1/1 [==============================] - 0s 100ms/step\n","1/1 [==============================] - 0s 22ms/step\n","E:  0.0159473771167971\n"]}]},{"cell_type":"markdown","source":["##EMCI vs AD"],"metadata":{"id":"KvNLqf0PiZf7"}},{"cell_type":"code","source":["promedio=prom(capa,5,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716264900,"user_tz":300,"elapsed":1219,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"3350ec54-79eb-4ac9-9505-ee45d9783b2d","id":"u8U1gQJYiZf7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 111ms/step\n","1/1 [==============================] - 0s 23ms/step\n","A:  -0.08111096458636222\n","1/1 [==============================] - 0s 98ms/step\n","1/1 [==============================] - 0s 23ms/step\n","B:  -0.16812835544969756\n","1/1 [==============================] - 0s 113ms/step\n","1/1 [==============================] - 0s 24ms/step\n","C:  -0.057500793342789215\n","1/1 [==============================] - 0s 104ms/step\n","1/1 [==============================] - 0s 23ms/step\n","D:  -0.08766024122592331\n","1/1 [==============================] - 0s 127ms/step\n","1/1 [==============================] - 0s 22ms/step\n","E:  -0.19764227145304428\n"]}]},{"cell_type":"markdown","source":["##LMCI vs AD"],"metadata":{"id":"SuJM2q0DiZf8"}},{"cell_type":"code","source":["promedio=prom(capa,2,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,3,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,4,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,7,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,12,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716265871,"user_tz":300,"elapsed":977,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"c1f4b943-33e3-45c5-f60b-3efdef9e73b5","id":"oORsrJBciZf8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 100ms/step\n","1/1 [==============================] - 0s 23ms/step\n","A:  0.5661654251876529\n","1/1 [==============================] - 0s 102ms/step\n","1/1 [==============================] - 0s 22ms/step\n","B:  0.6593775499818681\n","1/1 [==============================] - 0s 106ms/step\n","1/1 [==============================] - 0s 24ms/step\n","C:  0.28671737830527955\n","1/1 [==============================] - 0s 125ms/step\n","1/1 [==============================] - 0s 21ms/step\n","D:  -0.2321271801608583\n","1/1 [==============================] - 0s 110ms/step\n","1/1 [==============================] - 0s 22ms/step\n","E:  -0.09957659949226594\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"tWBoiu7EibZT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#256\n","\n","\n","\n"],"metadata":{"id":"lNgAuZJPiboJ"}},{"cell_type":"code","source":["def prom(layer_name,b,c):\n","  conv_layer = model.get_layer(layer_name)\n","  suma=0\n","  intermediate_model = tf.keras.Model(inputs=model.input, outputs=conv_layer.output)\n","  sample_data = X_test[b]\n","  activations1 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  sample_data = X_test[c]\n","  activations2 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  num_filters = activations2.shape[-1]\n","  for i in range(num_filters):\n","    correlation = np.corrcoef(activations1[0, :, i], activations2[0, :, i])[0, 1]\n","    suma=suma+correlation\n","  promedio=suma/num_filters\n","  return(promedio)"],"metadata":{"id":"ecQPpp86jrkw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["capa=\"conv1d_5\""],"metadata":{"id":"UlrirBLgiboK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##CN vs EMCI"],"metadata":{"id":"rsMfU6pZiboL"}},{"cell_type":"code","source":["promedio=prom(capa,0,5)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,6)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,10)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,14)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,16)\n","print(\"E: \",promedio)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1696716276538,"user_tz":300,"elapsed":4660,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"54d62f02-70f6-4b9a-e603-8f4eb1545b0c","id":"UCWN3RiliboM"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 357ms/step\n","1/1 [==============================] - 0s 72ms/step\n","A:  0.49075245926318967\n","1/1 [==============================] - 0s 433ms/step\n","1/1 [==============================] - 0s 47ms/step\n","B:  0.5268320010018152\n","1/1 [==============================] - 0s 497ms/step\n","1/1 [==============================] - 0s 70ms/step\n","C:  0.1390683905301474\n","1/1 [==============================] - 0s 481ms/step\n","1/1 [==============================] - 0s 84ms/step\n","D:  0.1707932248967375\n","1/1 [==============================] - 0s 480ms/step\n","1/1 [==============================] - 0s 95ms/step\n","E:  0.19691668757404568\n"]}]},{"cell_type":"markdown","source":["##CN vs LMCI\n"],"metadata":{"id":"O8asjCjAiboN"}},{"cell_type":"code","source":["promedio=prom(capa,0,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716280223,"user_tz":300,"elapsed":3729,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"9c5eae09-c98a-44c2-9964-03f3b8ebe675","id":"xXSCtp48iboO"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 385ms/step\n","1/1 [==============================] - 0s 78ms/step\n","A:  0.18680374649322148\n","1/1 [==============================] - 0s 368ms/step\n","1/1 [==============================] - 0s 80ms/step\n","B:  -0.1937856523738908\n","1/1 [==============================] - 0s 472ms/step\n","1/1 [==============================] - 0s 98ms/step\n","C:  -0.03786746261874667\n","1/1 [==============================] - 0s 219ms/step\n","1/1 [==============================] - 0s 41ms/step\n","D:  0.3842321465416176\n","1/1 [==============================] - 0s 240ms/step\n","1/1 [==============================] - 0s 38ms/step\n","E:  -0.13372385859970748\n"]}]},{"cell_type":"markdown","source":["##Cn vs AD"],"metadata":{"id":"RCfDRc_7iboP"}},{"cell_type":"code","source":["promedio=prom(capa,0,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716281880,"user_tz":300,"elapsed":1673,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"36320c19-58bf-4353-d27c-2a4d4e85d5dc","id":"4-4u1bgQiboQ"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 189ms/step\n","1/1 [==============================] - 0s 23ms/step\n","A:  0.14009181701863388\n","1/1 [==============================] - 0s 139ms/step\n","1/1 [==============================] - 0s 24ms/step\n","B:  0.0003105937063660122\n","1/1 [==============================] - 0s 142ms/step\n","1/1 [==============================] - 0s 24ms/step\n","C:  0.4523731817393572\n","1/1 [==============================] - 0s 151ms/step\n","1/1 [==============================] - 0s 28ms/step\n","D:  -0.0024960212014115478\n","1/1 [==============================] - 0s 146ms/step\n","1/1 [==============================] - 0s 27ms/step\n","E:  0.37096157807181834\n"]}]},{"cell_type":"markdown","source":["##EMCI vs LMCI"],"metadata":{"id":"e4IpcbWEiboR"}},{"cell_type":"code","source":["promedio=prom(capa,5,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716283467,"user_tz":300,"elapsed":1590,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"6f24ed39-2523-402a-901a-0f11b7605285","id":"5Ivvzxx-iboR"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 166ms/step\n","1/1 [==============================] - 0s 29ms/step\n","A:  0.04864066638028041\n","1/1 [==============================] - 0s 142ms/step\n","1/1 [==============================] - 0s 26ms/step\n","B:  -0.03362299975404365\n","1/1 [==============================] - 0s 161ms/step\n","1/1 [==============================] - 0s 27ms/step\n","C:  0.06138520909114597\n","1/1 [==============================] - 0s 164ms/step\n","1/1 [==============================] - 0s 22ms/step\n","D:  0.1910659688373985\n","1/1 [==============================] - 0s 155ms/step\n","1/1 [==============================] - 0s 22ms/step\n","E:  -0.029484182439104178\n"]}]},{"cell_type":"markdown","source":["##EMCI vs AD"],"metadata":{"id":"BkHGxGLsiboS"}},{"cell_type":"code","source":["promedio=prom(capa,5,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716285140,"user_tz":300,"elapsed":1680,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"93154229-9095-4ab6-a3ad-47eed829d2d2","id":"VCIOLlRHiboS"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 136ms/step\n","1/1 [==============================] - 0s 24ms/step\n","A:  0.11064433117449383\n","1/1 [==============================] - 0s 163ms/step\n","1/1 [==============================] - 0s 23ms/step\n","B:  0.0957190264288079\n","1/1 [==============================] - 0s 158ms/step\n","1/1 [==============================] - 0s 24ms/step\n","C:  0.01629609726195533\n","1/1 [==============================] - 0s 173ms/step\n","1/1 [==============================] - 0s 24ms/step\n","D:  0.12883039856229012\n","1/1 [==============================] - 0s 175ms/step\n","1/1 [==============================] - 0s 37ms/step\n","E:  0.06053315994897325\n"]}]},{"cell_type":"markdown","source":["##LMCI vs AD"],"metadata":{"id":"GAl-aEPYiboT"}},{"cell_type":"code","source":["promedio=prom(capa,2,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,3,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,4,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,7,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,12,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716287208,"user_tz":300,"elapsed":2071,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"777fcfae-dbd5-49e5-87cc-cdcf3d2359cb","id":"95OehkIWiboU"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 141ms/step\n","1/1 [==============================] - 0s 24ms/step\n","A:  0.5399034022754929\n","1/1 [==============================] - 0s 139ms/step\n","1/1 [==============================] - 0s 22ms/step\n","B:  0.592427993303432\n","1/1 [==============================] - 0s 171ms/step\n","1/1 [==============================] - 0s 26ms/step\n","C:  0.2637465494827452\n","1/1 [==============================] - 0s 144ms/step\n","1/1 [==============================] - 0s 23ms/step\n","D:  0.11258456493714895\n","1/1 [==============================] - 0s 281ms/step\n","1/1 [==============================] - 0s 103ms/step\n","E:  0.13378558733047413\n"]}]},{"cell_type":"markdown","source":["#Otro"],"metadata":{"id":"-oMd3mSfXloc"}},{"cell_type":"code","source":["cn=[]\n","lmci=[]\n","emci=[]\n","ad=[]\n","for i in range(len(y_test)):\n","  if y_test[i]==0:\n","    cn.append(i)\n","  if y_test[i]==1:\n","    emci.append(i)\n","  if y_test[i]==2:\n","    lmci.append(i)\n","  if y_test[i]==3:\n","    ad.append(i)"],"metadata":{"id":"VRCKAJe9Ed4H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"control\",len(cn))\n","print(\"emci\",len(emci))\n","print(\"lmci\",len(lmci))\n","print(\"ad\",len(ad))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MYx_SyMnFY0z","executionInfo":{"status":"ok","timestamp":1696716290508,"user_tz":300,"elapsed":3,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"760b8c23-e0a8-4ccf-fcee-e76046128189"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["control 117\n","emci 140\n","lmci 89\n","ad 24\n"]}]},{"cell_type":"code","source":["print(\"control\",cn)\n","print(\"emci\",emci)\n","print(\"lmci\",lmci)\n","print(\"ad\",ad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ghFnE7XoFDN6","executionInfo":{"status":"ok","timestamp":1696716295905,"user_tz":300,"elapsed":353,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"9c9f4d18-e10a-4cfe-af20-b4912aead2b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["control [0, 1, 8, 9, 11, 19, 20, 22, 24, 26, 31, 32, 39, 40, 43, 52, 53, 61, 63, 64, 66, 68, 70, 71, 72, 73, 75, 78, 79, 81, 83, 84, 95, 96, 98, 99, 100, 103, 106, 107, 108, 109, 110, 115, 125, 129, 131, 132, 135, 143, 144, 147, 148, 152, 159, 160, 161, 173, 175, 176, 177, 181, 183, 186, 189, 201, 204, 205, 206, 211, 215, 216, 219, 222, 225, 226, 227, 231, 235, 251, 258, 261, 262, 263, 264, 265, 275, 276, 280, 282, 284, 291, 293, 296, 299, 302, 306, 310, 311, 314, 316, 317, 323, 324, 327, 330, 336, 341, 342, 343, 346, 347, 350, 353, 361, 364, 366]\n","emci [5, 6, 10, 14, 16, 17, 21, 25, 28, 29, 30, 33, 34, 45, 46, 47, 48, 50, 54, 55, 56, 58, 59, 62, 67, 69, 74, 76, 77, 82, 87, 91, 92, 94, 97, 112, 113, 114, 118, 121, 123, 124, 127, 130, 133, 134, 136, 138, 139, 140, 142, 146, 150, 151, 153, 155, 157, 158, 165, 166, 167, 168, 169, 170, 171, 178, 179, 180, 182, 185, 187, 194, 195, 200, 202, 203, 207, 209, 210, 213, 218, 221, 228, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 252, 254, 255, 257, 266, 269, 270, 271, 273, 278, 279, 281, 288, 289, 290, 292, 300, 303, 307, 309, 313, 319, 322, 325, 326, 329, 331, 332, 337, 338, 339, 349, 351, 356, 357, 358, 360, 362, 365, 367, 369]\n","lmci [2, 3, 4, 7, 12, 18, 23, 35, 36, 37, 38, 41, 42, 49, 51, 60, 65, 85, 86, 88, 89, 90, 93, 101, 102, 105, 111, 119, 120, 122, 126, 128, 137, 141, 149, 156, 162, 164, 172, 174, 184, 188, 190, 191, 192, 193, 196, 197, 198, 199, 212, 214, 217, 229, 234, 244, 250, 253, 256, 259, 260, 267, 268, 274, 283, 285, 287, 294, 295, 297, 298, 301, 304, 305, 312, 318, 320, 328, 333, 334, 335, 340, 344, 352, 354, 355, 359, 363, 368]\n","ad [13, 15, 27, 44, 57, 80, 104, 116, 117, 145, 154, 163, 208, 220, 223, 224, 272, 277, 286, 308, 315, 321, 345, 348]\n"]}]},{"cell_type":"code","source":["len(X_test[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SYyz4Bxvlr0d","executionInfo":{"status":"ok","timestamp":1696354536173,"user_tz":300,"elapsed":294,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"773aaed0-4c21-4d22-863d-442b356ee045"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["28"]},"metadata":{},"execution_count":314}]},{"cell_type":"code","source":["len(X_test[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QbGqo_Q5nAy5","executionInfo":{"status":"ok","timestamp":1696354542279,"user_tz":300,"elapsed":260,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"abff0f75-b9c5-47ab-fdb8-ff53af90931a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["28"]},"metadata":{},"execution_count":315}]},{"cell_type":"code","source":["np.save(\"/content/drive/MyDrive/AlzheimerCodesDatosPlanos/ADNI/interpretación/X_test\",X_test)\n","np.save(\"/content/drive/MyDrive/AlzheimerCodesDatosPlanos/ADNI/interpretación/X_train\",X_train)\n","np.save(\"/content/drive/MyDrive/AlzheimerCodesDatosPlanos/ADNI/interpretación/y_test\",y_test)\n","np.save(\"/content/drive/MyDrive/AlzheimerCodesDatosPlanos/ADNI/interpretación/y_train\",y_train)"],"metadata":{"id":"rOHG1GaKl4Rl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Distancia euclidiana"],"metadata":{"id":"LI8LEaBUnIRF"}},{"cell_type":"code","source":["def prom(layer_name,b,c):\n","  conv_layer = model.get_layer(layer_name)\n","  suma=0\n","  intermediate_model = tf.keras.Model(inputs=model.input, outputs=conv_layer.output)\n","  sample_data = X_test[b]\n","  activations1 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  sample_data = X_test[c]\n","  activations2 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  num_filters = activations2.shape[-1]\n","  for i in range(num_filters):\n","    diferencia = activations1[0, :, i]- activations2[0, :, i]\n","    distancia = np.linalg.norm(diferencia)\n","    suma=suma+distancia\n","  promedio=suma/num_filters\n","  return(promedio)\n","\n"],"metadata":{"id":"JaZHYiIjnUzX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#8\n","\n","\n","\n"],"metadata":{"id":"O7Gs-4rpq4Jf"}},{"cell_type":"code","source":["capa=\"conv1d\""],"metadata":{"id":"siqpu6Joq4J7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##CN vs EMCI"],"metadata":{"id":"yq_Bjx4Vq4J8"}},{"cell_type":"code","source":["promedio=prom(capa,0,5)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,6)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,10)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,14)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,16)\n","print(\"E: \",promedio)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1696716402312,"user_tz":300,"elapsed":848,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1ae6b415-8747-4d55-982f-d72727926461","id":"r2yzIUXFq4J8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 51ms/step\n","1/1 [==============================] - 0s 24ms/step\n","A:  2.8712669014930725\n","1/1 [==============================] - 0s 60ms/step\n","1/1 [==============================] - 0s 23ms/step\n","B:  2.6252084970474243\n","1/1 [==============================] - 0s 58ms/step\n","1/1 [==============================] - 0s 23ms/step\n","C:  5.7895201444625854\n","1/1 [==============================] - 0s 54ms/step\n","1/1 [==============================] - 0s 33ms/step\n","D:  4.095750391483307\n","1/1 [==============================] - 0s 70ms/step\n","1/1 [==============================] - 0s 26ms/step\n","E:  2.9074478149414062\n"]}]},{"cell_type":"markdown","source":["##CN vs LMCI\n"],"metadata":{"id":"ehhfw-7mq4J9"}},{"cell_type":"code","source":["promedio=prom(capa,0,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716403418,"user_tz":300,"elapsed":1109,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"60227a0b-7a4c-4eb6-f7f5-1f33dbcd9333","id":"-NP7cVIdq4J-"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 61ms/step\n","1/1 [==============================] - 0s 24ms/step\n","A:  5.509207546710968\n","1/1 [==============================] - 0s 52ms/step\n","1/1 [==============================] - 0s 21ms/step\n","B:  4.9820476770401\n","1/1 [==============================] - 0s 55ms/step\n","1/1 [==============================] - 0s 24ms/step\n","C:  5.658790737390518\n","1/1 [==============================] - 0s 53ms/step\n","1/1 [==============================] - 0s 31ms/step\n","D:  2.452063173055649\n","1/1 [==============================] - 0s 55ms/step\n","1/1 [==============================] - 0s 26ms/step\n","E:  4.522161602973938\n"]}]},{"cell_type":"markdown","source":["##Cn vs AD"],"metadata":{"id":"nQJ1TWpqq4J-"}},{"cell_type":"code","source":["promedio=prom(capa,0,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716404404,"user_tz":300,"elapsed":997,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"117a12bb-d198-46de-b447-e37ca4a82f5c","id":"90s3LnNgq4J_"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 66ms/step\n","1/1 [==============================] - 0s 22ms/step\n","A:  3.844861626625061\n","1/1 [==============================] - 0s 54ms/step\n","1/1 [==============================] - 0s 22ms/step\n","B:  6.576404809951782\n","1/1 [==============================] - 0s 56ms/step\n","1/1 [==============================] - 0s 26ms/step\n","C:  4.3721601366996765\n","1/1 [==============================] - 0s 59ms/step\n","1/1 [==============================] - 0s 24ms/step\n","D:  6.7331273555755615\n","1/1 [==============================] - 0s 66ms/step\n","1/1 [==============================] - 0s 40ms/step\n","E:  5.40385240316391\n"]}]},{"cell_type":"markdown","source":["##EMCI vs LMCI"],"metadata":{"id":"Oi2qhws8q4J_"}},{"cell_type":"code","source":["promedio=prom(capa,5,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716406076,"user_tz":300,"elapsed":1675,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"71087f1d-82e5-4d60-b41f-f587953af745","id":"KSCZbWGtq4KA"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 81ms/step\n","1/1 [==============================] - 0s 34ms/step\n","A:  6.798768758773804\n","1/1 [==============================] - 0s 95ms/step\n","1/1 [==============================] - 0s 32ms/step\n","B:  4.80731138586998\n","1/1 [==============================] - 0s 77ms/step\n","1/1 [==============================] - 0s 32ms/step\n","C:  4.433853834867477\n","1/1 [==============================] - 0s 90ms/step\n","1/1 [==============================] - 0s 34ms/step\n","D:  3.4711082577705383\n","1/1 [==============================] - 0s 98ms/step\n","1/1 [==============================] - 0s 34ms/step\n","E:  4.95952183008194\n"]}]},{"cell_type":"markdown","source":["##EMCI vs AD"],"metadata":{"id":"aNiQ1G46q4KB"}},{"cell_type":"code","source":["promedio=prom(capa,5,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716407333,"user_tz":300,"elapsed":1259,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"89360f13-efeb-4f59-9b47-a6b6cf99120a","id":"-Qt_4REyq4KB"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 80ms/step\n","1/1 [==============================] - 0s 33ms/step\n","A:  4.731363952159882\n","1/1 [==============================] - 0s 90ms/step\n","1/1 [==============================] - 0s 34ms/step\n","B:  6.1726731061935425\n","1/1 [==============================] - 0s 81ms/step\n","1/1 [==============================] - 0s 34ms/step\n","C:  6.480693995952606\n","1/1 [==============================] - 0s 84ms/step\n","1/1 [==============================] - 0s 40ms/step\n","D:  5.438258409500122\n","1/1 [==============================] - 0s 90ms/step\n","1/1 [==============================] - 0s 43ms/step\n","E:  6.557616114616394\n"]}]},{"cell_type":"markdown","source":["##LMCI vs AD"],"metadata":{"id":"LEOsUwU9q4KC"}},{"cell_type":"code","source":["promedio=prom(capa,2,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,3,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,4,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,7,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,12,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716409405,"user_tz":300,"elapsed":2076,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"4440e1e6-0cfd-4f88-b59e-199b0f683d1b","id":"w2g5awgOq4KC"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 92ms/step\n","1/1 [==============================] - 0s 41ms/step\n","A:  3.3416422605514526\n","1/1 [==============================] - 0s 101ms/step\n","1/1 [==============================] - 0s 43ms/step\n","B:  3.154842436313629\n","1/1 [==============================] - 0s 101ms/step\n","1/1 [==============================] - 0s 44ms/step\n","C:  5.173630744218826\n","1/1 [==============================] - 0s 122ms/step\n","1/1 [==============================] - 0s 41ms/step\n","D:  6.68401437997818\n","1/1 [==============================] - 0s 98ms/step\n","1/1 [==============================] - 0s 40ms/step\n","E:  5.928499519824982\n"]}]},{"cell_type":"markdown","source":["#64\n","\n","\n","\n"],"metadata":{"id":"eKcXcPP-q4KD"}},{"cell_type":"code","source":["capa=\"conv1d_3\""],"metadata":{"id":"2Dllm908q4KD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##CN vs EMCI"],"metadata":{"id":"PDt5tfQFq4KE"}},{"cell_type":"code","source":["promedio=prom(capa,0,5)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,6)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,10)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,14)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,16)\n","print(\"E: \",promedio)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1696716439104,"user_tz":300,"elapsed":2987,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d7edf1ac-c324-44e2-809e-2c87a4c076e1","id":"zgz2CX1Zq4KF"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 160ms/step\n","1/1 [==============================] - 0s 32ms/step\n","A:  1.5299920048564672\n","1/1 [==============================] - 0s 153ms/step\n","1/1 [==============================] - 0s 54ms/step\n","B:  1.4302883995696902\n","1/1 [==============================] - 0s 260ms/step\n","1/1 [==============================] - 0s 67ms/step\n","C:  2.4832532852888107\n","1/1 [==============================] - 0s 397ms/step\n","1/1 [==============================] - 0s 84ms/step\n","D:  2.0928920628502965\n","1/1 [==============================] - 0s 454ms/step\n","1/1 [==============================] - 0s 88ms/step\n","E:  1.64871605951339\n"]}]},{"cell_type":"markdown","source":["##CN vs LMCI\n"],"metadata":{"id":"3Ku2G360q4KF"}},{"cell_type":"code","source":["promedio=prom(capa,0,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716443360,"user_tz":300,"elapsed":3913,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"7cf0f04f-07fb-4e2a-f1ab-3aa1c7a1caf3","id":"qHhqP0XNq4KG"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 264ms/step\n","1/1 [==============================] - 0s 123ms/step\n","A:  2.2016264367848635\n","1/1 [==============================] - 0s 429ms/step\n","1/1 [==============================] - 0s 81ms/step\n","B:  2.2796528097242117\n","1/1 [==============================] - 0s 466ms/step\n","1/1 [==============================] - 0s 86ms/step\n","C:  2.7651415821164846\n","1/1 [==============================] - 0s 242ms/step\n","1/1 [==============================] - 0s 64ms/step\n","D:  1.3135673124343157\n","1/1 [==============================] - 0s 353ms/step\n","1/1 [==============================] - 0s 85ms/step\n","E:  2.2976826205849648\n"]}]},{"cell_type":"markdown","source":["##Cn vs AD"],"metadata":{"id":"oex2JqrAq4KG"}},{"cell_type":"code","source":["promedio=prom(capa,0,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716445800,"user_tz":300,"elapsed":2445,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"19c5fd5e-38ff-42c1-bbbe-aa33bf374239","id":"TCMKY33Iq4KH"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 367ms/step\n","1/1 [==============================] - 0s 56ms/step\n","A:  1.8343553701415658\n","1/1 [==============================] - 0s 383ms/step\n","1/1 [==============================] - 0s 48ms/step\n","B:  2.550546644255519\n","1/1 [==============================] - 0s 306ms/step\n","1/1 [==============================] - 0s 36ms/step\n","C:  1.984335987828672\n","1/1 [==============================] - 0s 149ms/step\n","1/1 [==============================] - 0s 53ms/step\n","D:  2.706289006397128\n","1/1 [==============================] - 0s 156ms/step\n","1/1 [==============================] - 0s 38ms/step\n","E:  2.0716617461293936\n"]}]},{"cell_type":"markdown","source":["##EMCI vs LMCI"],"metadata":{"id":"342R7vkPq4KI"}},{"cell_type":"code","source":["promedio=prom(capa,5,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716449673,"user_tz":300,"elapsed":3875,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"920ab031-37b8-4e91-c2bd-cfcf88919922","id":"dIVR2Oj3q4KI"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 212ms/step\n","1/1 [==============================] - 0s 64ms/step\n","A:  2.5821979101747274\n","1/1 [==============================] - 0s 427ms/step\n","1/1 [==============================] - 0s 81ms/step\n","B:  2.341291092336178\n","1/1 [==============================] - 0s 371ms/step\n","1/1 [==============================] - 0s 107ms/step\n","C:  2.0839178021997213\n","1/1 [==============================] - 0s 376ms/step\n","1/1 [==============================] - 0s 105ms/step\n","D:  2.0071409521624446\n","1/1 [==============================] - 0s 343ms/step\n","1/1 [==============================] - 0s 58ms/step\n","E:  2.38682253472507\n"]}]},{"cell_type":"markdown","source":["##EMCI vs AD"],"metadata":{"id":"2yjWB7pPq4KJ"}},{"cell_type":"code","source":["promedio=prom(capa,5,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716452613,"user_tz":300,"elapsed":2942,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"060664dc-0e82-4a57-919e-019f6c91eb91","id":"Q07MOn9tq4KJ"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 486ms/step\n","1/1 [==============================] - 0s 119ms/step\n","A:  1.938098513521254\n","1/1 [==============================] - 0s 225ms/step\n","1/1 [==============================] - 0s 37ms/step\n","B:  2.7014460880309343\n","1/1 [==============================] - 0s 172ms/step\n","1/1 [==============================] - 0s 34ms/step\n","C:  2.791187983006239\n","1/1 [==============================] - 0s 177ms/step\n","1/1 [==============================] - 0s 35ms/step\n","D:  2.4167679119855165\n","1/1 [==============================] - 0s 160ms/step\n","1/1 [==============================] - 0s 38ms/step\n","E:  2.552902130410075\n"]}]},{"cell_type":"markdown","source":["##LMCI vs AD"],"metadata":{"id":"7GYYULcQq4KK"}},{"cell_type":"code","source":["promedio=prom(capa,2,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,3,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,4,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,7,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,12,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716454747,"user_tz":300,"elapsed":2148,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"60f7eaed-91de-4387-f67b-296d18a0609f","id":"yZI-wHlrq4KL"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 166ms/step\n","1/1 [==============================] - 0s 35ms/step\n","A:  1.6508422745391726\n","1/1 [==============================] - 0s 180ms/step\n","1/1 [==============================] - 0s 32ms/step\n","B:  1.5386433470994234\n","1/1 [==============================] - 0s 201ms/step\n","1/1 [==============================] - 0s 32ms/step\n","C:  2.2227808833122253\n","1/1 [==============================] - 0s 162ms/step\n","1/1 [==============================] - 0s 56ms/step\n","D:  2.7333157379180193\n","1/1 [==============================] - 0s 197ms/step\n","1/1 [==============================] - 0s 24ms/step\n","E:  2.8743439838290215\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"iTLoULBYq4KM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#256\n","\n","\n","\n"],"metadata":{"id":"tvEMo9njq4KM"}},{"cell_type":"code","source":["capa=\"conv1d_5\""],"metadata":{"id":"ql3Qae5Iq4KN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##CN vs EMCI"],"metadata":{"id":"QzmeP4zdq4KO"}},{"cell_type":"code","source":["promedio=prom(capa,0,5)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,6)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,10)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,14)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,16)\n","print(\"E: \",promedio)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1696716463684,"user_tz":300,"elapsed":6893,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0bc9c6f5-4905-4139-bc47-d7fe18a90519","id":"xNIy-zvIq4KO"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 466ms/step\n","1/1 [==============================] - 0s 96ms/step\n","A:  0.34584850959072355\n","1/1 [==============================] - 1s 571ms/step\n","1/1 [==============================] - 0s 76ms/step\n","B:  0.4262584258976858\n","1/1 [==============================] - 1s 656ms/step\n","1/1 [==============================] - 0s 83ms/step\n","C:  0.6328925660054665\n","1/1 [==============================] - 1s 570ms/step\n","1/1 [==============================] - 0s 113ms/step\n","D:  0.6009086479316466\n","1/1 [==============================] - 0s 324ms/step\n","1/1 [==============================] - 0s 53ms/step\n","E:  0.4686022958776448\n"]}]},{"cell_type":"markdown","source":["##CN vs LMCI\n"],"metadata":{"id":"D2Nqw9MKq4KP"}},{"cell_type":"code","source":["promedio=prom(capa,0,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716466138,"user_tz":300,"elapsed":2463,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"82ab6d74-bb5a-4599-90d0-f3755c93dac6","id":"heEAG3J0q4KQ"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 266ms/step\n","1/1 [==============================] - 0s 40ms/step\n","A:  0.5690804030455183\n","1/1 [==============================] - 0s 285ms/step\n","1/1 [==============================] - 0s 56ms/step\n","B:  0.7109244427992962\n","1/1 [==============================] - 0s 282ms/step\n","1/1 [==============================] - 0s 47ms/step\n","C:  0.7637378990766592\n","1/1 [==============================] - 0s 242ms/step\n","1/1 [==============================] - 0s 42ms/step\n","D:  0.42916602472541854\n","1/1 [==============================] - 0s 261ms/step\n","1/1 [==============================] - 0s 45ms/step\n","E:  0.6447386728832498\n"]}]},{"cell_type":"markdown","source":["##Cn vs AD"],"metadata":{"id":"VfUvAI0qq4KR"}},{"cell_type":"code","source":["promedio=prom(capa,0,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716468705,"user_tz":300,"elapsed":2577,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"efde148e-f20d-4ef7-acbb-1187c4bf82f6","id":"rCg5qvk6q4KS"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 247ms/step\n","1/1 [==============================] - 0s 38ms/step\n","A:  0.41986985903349705\n","1/1 [==============================] - 0s 291ms/step\n","1/1 [==============================] - 0s 45ms/step\n","B:  0.7084745902975556\n","1/1 [==============================] - 0s 242ms/step\n","1/1 [==============================] - 0s 44ms/step\n","C:  0.6180293571669608\n","1/1 [==============================] - 0s 265ms/step\n","1/1 [==============================] - 0s 42ms/step\n","D:  0.6994422691059299\n","1/1 [==============================] - 0s 264ms/step\n","1/1 [==============================] - 0s 39ms/step\n","E:  0.5531888915720629\n"]}]},{"cell_type":"markdown","source":["##EMCI vs LMCI"],"metadata":{"id":"O3p8FqdEq4KT"}},{"cell_type":"code","source":["promedio=prom(capa,5,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716470679,"user_tz":300,"elapsed":2028,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"90935a0c-ff04-4af8-b5b7-a140e5bf9f15","id":"BwAGDQycq4KT"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 262ms/step\n","1/1 [==============================] - 0s 39ms/step\n","A:  0.6434133637521882\n","1/1 [==============================] - 0s 263ms/step\n","1/1 [==============================] - 0s 39ms/step\n","B:  0.6770633794658352\n","1/1 [==============================] - 0s 219ms/step\n","1/1 [==============================] - 0s 25ms/step\n","C:  0.6297227352188202\n","1/1 [==============================] - 0s 152ms/step\n","1/1 [==============================] - 0s 25ms/step\n","D:  0.5520558787829941\n","1/1 [==============================] - 0s 146ms/step\n","1/1 [==============================] - 0s 25ms/step\n","E:  0.7019706153660081\n"]}]},{"cell_type":"markdown","source":["##EMCI vs AD"],"metadata":{"id":"jP8x7ixuq4KU"}},{"cell_type":"code","source":["promedio=prom(capa,5,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716472094,"user_tz":300,"elapsed":1423,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"bee723b9-e2f7-4017-b2b5-a36ff791295b","id":"2slK7q0-q4KU"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 153ms/step\n","1/1 [==============================] - 0s 24ms/step\n","A:  0.47515047148044687\n","1/1 [==============================] - 0s 159ms/step\n","1/1 [==============================] - 0s 25ms/step\n","B:  0.7154304673313163\n","1/1 [==============================] - 0s 160ms/step\n","1/1 [==============================] - 0s 27ms/step\n","C:  0.8093438640062232\n","1/1 [==============================] - 0s 159ms/step\n","1/1 [==============================] - 0s 27ms/step\n","D:  0.620425647997763\n","1/1 [==============================] - 0s 162ms/step\n","1/1 [==============================] - 0s 25ms/step\n","E:  0.6961367282783613\n"]}]},{"cell_type":"markdown","source":["##LMCI vs AD"],"metadata":{"id":"HgpcrcA7q4KV"}},{"cell_type":"code","source":["promedio=prom(capa,2,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,3,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,4,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,7,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,12,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696716473861,"user_tz":300,"elapsed":1778,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"4e7a59e0-9a7e-4cca-b374-10d569c8b92f","id":"RKFWVHWgq4KW"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 139ms/step\n","1/1 [==============================] - 0s 23ms/step\n","A:  0.4404602875583805\n","1/1 [==============================] - 0s 147ms/step\n","1/1 [==============================] - 0s 27ms/step\n","B:  0.44138139751157723\n","1/1 [==============================] - 0s 161ms/step\n","1/1 [==============================] - 0s 30ms/step\n","C:  0.6261037617223337\n","1/1 [==============================] - 0s 231ms/step\n","1/1 [==============================] - 0s 40ms/step\n","D:  0.6366353624034673\n","1/1 [==============================] - 0s 226ms/step\n","1/1 [==============================] - 0s 35ms/step\n","E:  0.78513412643224\n"]}]},{"cell_type":"markdown","source":["#Distancia Manhatan"],"metadata":{"id":"y1yKp4UHLyKY"}},{"cell_type":"code","source":["def prom(layer_name,b,c):\n","  conv_layer = model.get_layer(layer_name)\n","  suma=0\n","  intermediate_model = tf.keras.Model(inputs=model.input, outputs=conv_layer.output)\n","  sample_data = X_test[b]\n","  activations1 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  sample_data = X_test[c]\n","  activations2 = intermediate_model.predict(sample_data.reshape(1, -1, 1))\n","  num_filters = activations2.shape[-1]\n","\n","  for i in range(num_filters):\n","    distancia=np.sum(np.abs( activations1[0, :, i] -  activations2[0, :, i]))\n","\n","\n","    suma=suma+distancia\n","  promedio=suma/num_filters\n","  return(promedio)"],"metadata":{"id":"splY37zSMk7z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#8\n","\n","\n","\n"],"metadata":{"id":"Yuw-Z2DCLyK1"}},{"cell_type":"code","source":["capa=\"conv1d\""],"metadata":{"id":"Mdg1wpd-LyK2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##CN vs EMCI"],"metadata":{"id":"9hmrcFoXLyK3"}},{"cell_type":"code","source":["promedio=prom(capa,0,5)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,6)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,10)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,14)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,16)\n","print(\"E: \",promedio)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1696721769318,"user_tz":300,"elapsed":1706,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3c359be0-c926-4821-d93c-308b33402eb4","id":"mKVD9YiQLyK3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 92ms/step\n","1/1 [==============================] - 0s 32ms/step\n","A:  11.855556666851044\n","1/1 [==============================] - 0s 86ms/step\n","1/1 [==============================] - 0s 37ms/step\n","B:  10.952320098876953\n","1/1 [==============================] - 0s 106ms/step\n","1/1 [==============================] - 0s 48ms/step\n","C:  23.764515161514282\n","1/1 [==============================] - 0s 86ms/step\n","1/1 [==============================] - 0s 44ms/step\n","D:  17.630300879478455\n","1/1 [==============================] - 0s 79ms/step\n","1/1 [==============================] - 0s 37ms/step\n","E:  12.762338399887085\n"]}]},{"cell_type":"markdown","source":["##CN vs LMCI\n"],"metadata":{"id":"b7iT38w8LyK4"}},{"cell_type":"code","source":["promedio=prom(capa,0,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721771988,"user_tz":300,"elapsed":2676,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"6a738aed-bf74-4cc5-9ed0-508167b3acb1","id":"iS5RQOhILyK5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 105ms/step\n","1/1 [==============================] - 0s 32ms/step\n","A:  24.176483392715454\n","1/1 [==============================] - 0s 85ms/step\n","1/1 [==============================] - 0s 46ms/step\n","B:  21.98734426498413\n","1/1 [==============================] - 0s 90ms/step\n","1/1 [==============================] - 0s 34ms/step\n","C:  24.453604578971863\n","1/1 [==============================] - 0s 100ms/step\n","1/1 [==============================] - 0s 48ms/step\n","D:  9.555346012115479\n","1/1 [==============================] - 0s 197ms/step\n","1/1 [==============================] - 0s 96ms/step\n","E:  19.063741445541382\n"]}]},{"cell_type":"markdown","source":["##Cn vs AD"],"metadata":{"id":"IHgOL2MmLyK5"}},{"cell_type":"code","source":["promedio=prom(capa,0,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721776019,"user_tz":300,"elapsed":4035,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"e7b965cf-5461-4dd3-83f1-03d815384eac","id":"UIjrtJahLyK6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 244ms/step\n","1/1 [==============================] - 0s 79ms/step\n","A:  16.954177975654602\n","1/1 [==============================] - 0s 257ms/step\n","1/1 [==============================] - 0s 126ms/step\n","B:  27.07724952697754\n","1/1 [==============================] - 0s 276ms/step\n","1/1 [==============================] - 0s 106ms/step\n","C:  17.975239396095276\n","1/1 [==============================] - 0s 275ms/step\n","1/1 [==============================] - 0s 101ms/step\n","D:  29.533442497253418\n","1/1 [==============================] - 0s 271ms/step\n","1/1 [==============================] - 0s 104ms/step\n","E:  23.7942214012146\n"]}]},{"cell_type":"markdown","source":["##EMCI vs LMCI"],"metadata":{"id":"7zxV0nbMLyK6"}},{"cell_type":"code","source":["promedio=prom(capa,5,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721780064,"user_tz":300,"elapsed":4090,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"e4322746-e39e-43fc-e947-18339102ca1a","id":"bgyNZmP8LyK7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 248ms/step\n","1/1 [==============================] - 0s 72ms/step\n","A:  30.45903730392456\n","1/1 [==============================] - 0s 212ms/step\n","1/1 [==============================] - 0s 126ms/step\n","B:  20.99641251564026\n","1/1 [==============================] - 0s 273ms/step\n","1/1 [==============================] - 0s 100ms/step\n","C:  19.554086923599243\n","1/1 [==============================] - 0s 184ms/step\n","1/1 [==============================] - 0s 116ms/step\n","D:  14.256426811218262\n","1/1 [==============================] - 0s 249ms/step\n","1/1 [==============================] - 0s 111ms/step\n","E:  20.89968204498291\n"]}]},{"cell_type":"markdown","source":["##EMCI vs AD"],"metadata":{"id":"H4ACbtmqLyK8"}},{"cell_type":"code","source":["promedio=prom(capa,5,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721781366,"user_tz":300,"elapsed":1345,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"e2b3f711-950e-447c-d006-fa57054764a5","id":"V_xM8j1ALyK8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 251ms/step\n","1/1 [==============================] - 0s 43ms/step\n","A:  21.14634919166565\n","1/1 [==============================] - 0s 101ms/step\n","1/1 [==============================] - 0s 52ms/step\n","B:  26.39464569091797\n","1/1 [==============================] - 0s 105ms/step\n","1/1 [==============================] - 0s 43ms/step\n","C:  27.223255395889282\n","1/1 [==============================] - 0s 99ms/step\n","1/1 [==============================] - 0s 45ms/step\n","D:  23.001805067062378\n","1/1 [==============================] - 0s 107ms/step\n","1/1 [==============================] - 0s 41ms/step\n","E:  28.936020612716675\n"]}]},{"cell_type":"markdown","source":["##LMCI vs AD"],"metadata":{"id":"2PA6TM_lLyK9"}},{"cell_type":"code","source":["promedio=prom(capa,2,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,3,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,4,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,7,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,12,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721783275,"user_tz":300,"elapsed":1917,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"fb77969a-03c2-4a7c-a83e-d76beff89738","id":"Kqw3uRUNLyK9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 105ms/step\n","1/1 [==============================] - 0s 40ms/step\n","A:  14.316161751747131\n","1/1 [==============================] - 0s 105ms/step\n","1/1 [==============================] - 0s 59ms/step\n","B:  13.23681366443634\n","1/1 [==============================] - 0s 113ms/step\n","1/1 [==============================] - 0s 47ms/step\n","C:  22.03807246685028\n","1/1 [==============================] - 0s 98ms/step\n","1/1 [==============================] - 0s 40ms/step\n","D:  29.699594974517822\n","1/1 [==============================] - 0s 108ms/step\n","1/1 [==============================] - 0s 69ms/step\n","E:  26.13272976875305\n"]}]},{"cell_type":"markdown","source":["#64\n","\n","\n","\n"],"metadata":{"id":"cNHSIZ1sLyK-"}},{"cell_type":"code","source":["capa=\"conv1d_3\""],"metadata":{"id":"Q5_XMVhhLyK-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##CN vs EMCI"],"metadata":{"id":"6nvNQwvwLyK_"}},{"cell_type":"code","source":["promedio=prom(capa,0,5)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,6)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,10)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,14)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,16)\n","print(\"E: \",promedio)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1696721785605,"user_tz":300,"elapsed":2334,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"10d32bd8-9e07-4049-b900-7522bed1b54f","id":"187mvOd6LyK_"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 241ms/step\n","1/1 [==============================] - 0s 40ms/step\n","A:  4.64363282546401\n","1/1 [==============================] - 0s 188ms/step\n","1/1 [==============================] - 0s 49ms/step\n","B:  4.328781716525555\n","1/1 [==============================] - 0s 266ms/step\n","1/1 [==============================] - 0s 52ms/step\n","C:  7.451010707765818\n","1/1 [==============================] - 0s 179ms/step\n","1/1 [==============================] - 0s 42ms/step\n","D:  6.178812021389604\n","1/1 [==============================] - 0s 164ms/step\n","1/1 [==============================] - 0s 42ms/step\n","E:  4.970545809715986\n"]}]},{"cell_type":"markdown","source":["##CN vs LMCI\n"],"metadata":{"id":"Psfqtya8LyLA"}},{"cell_type":"code","source":["promedio=prom(capa,0,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721787363,"user_tz":300,"elapsed":1771,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"5e705ce0-1dde-403b-aab7-8653d6c1c0ae","id":"-k9eH3nJLyLB"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 190ms/step\n","1/1 [==============================] - 0s 37ms/step\n","A:  6.77489310875535\n","1/1 [==============================] - 0s 161ms/step\n","1/1 [==============================] - 0s 44ms/step\n","B:  7.132380943745375\n","1/1 [==============================] - 0s 159ms/step\n","1/1 [==============================] - 0s 36ms/step\n","C:  8.68378210440278\n","1/1 [==============================] - 0s 167ms/step\n","1/1 [==============================] - 0s 36ms/step\n","D:  3.883546743541956\n","1/1 [==============================] - 0s 111ms/step\n","1/1 [==============================] - 0s 25ms/step\n","E:  7.105693597346544\n"]}]},{"cell_type":"markdown","source":["##Cn vs AD"],"metadata":{"id":"mcvrXbHGLyLC"}},{"cell_type":"code","source":["promedio=prom(capa,0,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721788996,"user_tz":300,"elapsed":1645,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"41a2fcd7-da51-4a41-f1a5-31f3435f22b4","id":"IUjT5FEkLyLC"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 114ms/step\n","1/1 [==============================] - 0s 26ms/step\n","A:  5.60072785615921\n","1/1 [==============================] - 0s 120ms/step\n","1/1 [==============================] - 0s 27ms/step\n","B:  7.8850267343223095\n","1/1 [==============================] - 0s 123ms/step\n","1/1 [==============================] - 0s 29ms/step\n","C:  5.782296847552061\n","1/1 [==============================] - 0s 132ms/step\n","1/1 [==============================] - 0s 27ms/step\n","D:  8.451203726232052\n","1/1 [==============================] - 0s 112ms/step\n","1/1 [==============================] - 0s 25ms/step\n","E:  6.509769804775715\n"]}]},{"cell_type":"markdown","source":["##EMCI vs LMCI"],"metadata":{"id":"9x41J1k7LyLD"}},{"cell_type":"code","source":["promedio=prom(capa,5,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721790162,"user_tz":300,"elapsed":1169,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"9d4c7737-eb24-459b-ba89-59132b5f2dce","id":"DP1zjuDWLyLE"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 109ms/step\n","1/1 [==============================] - 0s 29ms/step\n","A:  8.091758362948895\n","1/1 [==============================] - 0s 110ms/step\n","1/1 [==============================] - 0s 26ms/step\n","B:  7.076549410820007\n","1/1 [==============================] - 0s 109ms/step\n","1/1 [==============================] - 0s 24ms/step\n","C:  6.365651696920395\n","1/1 [==============================] - 0s 116ms/step\n","1/1 [==============================] - 0s 29ms/step\n","D:  5.816020052880049\n","1/1 [==============================] - 0s 108ms/step\n","1/1 [==============================] - 0s 33ms/step\n","E:  7.48033706471324\n"]}]},{"cell_type":"markdown","source":["##EMCI vs AD"],"metadata":{"id":"V_kNLElLLyLE"}},{"cell_type":"code","source":["promedio=prom(capa,5,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721791847,"user_tz":300,"elapsed":1700,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"c4505091-557d-4e45-a62a-6c892e70fe75","id":"5GBqNMcmLyLF"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 159ms/step\n","1/1 [==============================] - 0s 46ms/step\n","A:  5.848425719887018\n","1/1 [==============================] - 0s 177ms/step\n","1/1 [==============================] - 0s 39ms/step\n","B:  8.109058283269405\n","1/1 [==============================] - 0s 157ms/step\n","1/1 [==============================] - 0s 34ms/step\n","C:  8.466059401631355\n","1/1 [==============================] - 0s 152ms/step\n","1/1 [==============================] - 0s 35ms/step\n","D:  7.361320052295923\n","1/1 [==============================] - 0s 201ms/step\n","1/1 [==============================] - 0s 52ms/step\n","E:  7.681328542530537\n"]}]},{"cell_type":"markdown","source":["##LMCI vs AD"],"metadata":{"id":"jyUwqHPNLyLF"}},{"cell_type":"code","source":["promedio=prom(capa,2,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,3,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,4,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,7,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,12,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721794724,"user_tz":300,"elapsed":2886,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"f2e7b9a3-952a-4699-fa55-2469acea5e09","id":"s_kojgsgLyLG"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 185ms/step\n","1/1 [==============================] - 0s 48ms/step\n","A:  5.055079363286495\n","1/1 [==============================] - 0s 211ms/step\n","1/1 [==============================] - 0s 35ms/step\n","B:  4.570595722645521\n","1/1 [==============================] - 0s 195ms/step\n","1/1 [==============================] - 0s 79ms/step\n","C:  6.656932946294546\n","1/1 [==============================] - 0s 189ms/step\n","1/1 [==============================] - 0s 43ms/step\n","D:  8.488515362143517\n","1/1 [==============================] - 0s 167ms/step\n","1/1 [==============================] - 0s 41ms/step\n","E:  9.053710639476776\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"atuoFGOQLyLG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#256\n","\n","\n","\n"],"metadata":{"id":"Y71Myp-XLyLH"}},{"cell_type":"code","source":["capa=\"conv1d_5\""],"metadata":{"id":"VkTwmf01LyLH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##CN vs EMCI"],"metadata":{"id":"EN4Z54LRLyLI"}},{"cell_type":"code","source":["promedio=prom(capa,0,5)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,6)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,10)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,14)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,16)\n","print(\"E: \",promedio)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1696721797344,"user_tz":300,"elapsed":2672,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9aaa9419-4941-413d-d1eb-baaf8e943ce9","id":"irl6wBE-LyLI"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 206ms/step\n","1/1 [==============================] - 0s 42ms/step\n","A:  0.5172073091380298\n","1/1 [==============================] - 0s 275ms/step\n","1/1 [==============================] - 0s 33ms/step\n","B:  0.6442844390985556\n","1/1 [==============================] - 0s 249ms/step\n","1/1 [==============================] - 0s 33ms/step\n","C:  0.9342563242535107\n","1/1 [==============================] - 0s 287ms/step\n","1/1 [==============================] - 0s 52ms/step\n","D:  0.9061139700061176\n","1/1 [==============================] - 0s 295ms/step\n","1/1 [==============================] - 0s 51ms/step\n","E:  0.6987156477989629\n"]}]},{"cell_type":"markdown","source":["##CN vs LMCI\n"],"metadata":{"id":"ibXrFUdsLyLJ"}},{"cell_type":"code","source":["promedio=prom(capa,0,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721799467,"user_tz":300,"elapsed":2129,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"2c9449d8-da78-4f3c-c396-4d077aa9b8ba","id":"mTkMbwwsLyLJ"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 318ms/step\n","1/1 [==============================] - 0s 73ms/step\n","A:  0.8615755905630067\n","1/1 [==============================] - 0s 244ms/step\n","1/1 [==============================] - 0s 67ms/step\n","B:  1.0747692516306415\n","1/1 [==============================] - 0s 286ms/step\n","1/1 [==============================] - 0s 45ms/step\n","C:  1.138172073813621\n","1/1 [==============================] - 0s 282ms/step\n","1/1 [==============================] - 0s 42ms/step\n","D:  0.6422555762110278\n","1/1 [==============================] - 0s 278ms/step\n","1/1 [==============================] - 0s 42ms/step\n","E:  0.9871897636330687\n"]}]},{"cell_type":"markdown","source":["##Cn vs AD"],"metadata":{"id":"nSv30PUILyLK"}},{"cell_type":"code","source":["promedio=prom(capa,0,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,1,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,8,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,9,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,11,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721802472,"user_tz":300,"elapsed":3016,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"0bddb590-892b-489a-ab8f-affb8c161a40","id":"7LZtB96fLyLK"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 262ms/step\n","1/1 [==============================] - 0s 72ms/step\n","A:  0.62935671073501\n","1/1 [==============================] - 0s 300ms/step\n","1/1 [==============================] - 0s 59ms/step\n","B:  1.0692389319301583\n","1/1 [==============================] - 0s 294ms/step\n","1/1 [==============================] - 0s 37ms/step\n","C:  0.9229820343316533\n","1/1 [==============================] - 0s 265ms/step\n","1/1 [==============================] - 0s 52ms/step\n","D:  1.0579301914549433\n","1/1 [==============================] - 0s 249ms/step\n","1/1 [==============================] - 0s 34ms/step\n","E:  0.8306507880333811\n"]}]},{"cell_type":"markdown","source":["##EMCI vs LMCI"],"metadata":{"id":"G_gEHCr6LyLL"}},{"cell_type":"code","source":["promedio=prom(capa,5,2)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,3)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,4)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,7)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,12)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721804368,"user_tz":300,"elapsed":1910,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"470f7993-4587-443f-e701-e6c6c5810b82","id":"7cIEiJatLyLL"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 232ms/step\n","1/1 [==============================] - 0s 35ms/step\n","A:  0.955752928100992\n","1/1 [==============================] - 0s 226ms/step\n","1/1 [==============================] - 0s 39ms/step\n","B:  1.016240552009549\n","1/1 [==============================] - 0s 213ms/step\n","1/1 [==============================] - 0s 23ms/step\n","C:  0.9405378304654732\n","1/1 [==============================] - 0s 144ms/step\n","1/1 [==============================] - 0s 24ms/step\n","D:  0.835980707721319\n","1/1 [==============================] - 0s 147ms/step\n","1/1 [==============================] - 0s 23ms/step\n","E:  1.0490849299239926\n"]}]},{"cell_type":"markdown","source":["##EMCI vs AD"],"metadata":{"id":"m_RNc4IsLyLM"}},{"cell_type":"code","source":["promedio=prom(capa,5,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,6,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,10,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,14,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,16,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721805751,"user_tz":300,"elapsed":1391,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"647baa2a-7b2c-43c6-d33f-74df27f4b8ea","id":"jK5OUMekLyLM"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 134ms/step\n","1/1 [==============================] - 0s 25ms/step\n","A:  0.6993049671582412\n","1/1 [==============================] - 0s 168ms/step\n","1/1 [==============================] - 0s 28ms/step\n","B:  1.077512443298474\n","1/1 [==============================] - 0s 150ms/step\n","1/1 [==============================] - 0s 24ms/step\n","C:  1.2180756655870937\n","1/1 [==============================] - 0s 139ms/step\n","1/1 [==============================] - 0s 24ms/step\n","D:  0.9353113432298414\n","1/1 [==============================] - 0s 139ms/step\n","1/1 [==============================] - 0s 23ms/step\n","E:  1.0556765088113025\n"]}]},{"cell_type":"markdown","source":["##LMCI vs AD"],"metadata":{"id":"jYepdsIFLyLN"}},{"cell_type":"code","source":["promedio=prom(capa,2,13)\n","print(\"A: \",promedio)\n","promedio=prom(capa,3,15)\n","print(\"B: \",promedio)\n","promedio=prom(capa,4,27)\n","print(\"C: \",promedio)\n","promedio=prom(capa,7,44)\n","print(\"D: \",promedio)\n","promedio=prom(capa,12,57)\n","print(\"E: \",promedio)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696721807005,"user_tz":300,"elapsed":1266,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"3dc94fc1-c7e7-43d9-9c54-485030df7673","id":"i3-ZzDzHLyLN"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 136ms/step\n","1/1 [==============================] - 0s 22ms/step\n","A:  0.6562608816602733\n","1/1 [==============================] - 0s 145ms/step\n","1/1 [==============================] - 0s 24ms/step\n","B:  0.6608694814494811\n","1/1 [==============================] - 0s 145ms/step\n","1/1 [==============================] - 0s 23ms/step\n","C:  0.9227599131700117\n","1/1 [==============================] - 0s 168ms/step\n","1/1 [==============================] - 0s 24ms/step\n","D:  0.9594559240504168\n","1/1 [==============================] - 0s 145ms/step\n","1/1 [==============================] - 0s 23ms/step\n","E:  1.202437916654162\n"]}]},{"cell_type":"markdown","source":["#GradCam"],"metadata":{"id":"Me4enkt0jR5K"}},{"cell_type":"code","source":["X_train[0].shape"],"metadata":{"id":"UiSCUfKrl3ze","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698535531591,"user_tz":300,"elapsed":290,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"2c42c9a7-61e2-490b-be24-c266d47b07d3"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(28, 1)"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["shape=(X_train.shape[1],1)"],"metadata":{"id":"bHLNAAHxm8u4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vqcMR-bWomBh","executionInfo":{"status":"ok","timestamp":1698535554966,"user_tz":300,"elapsed":345,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"3758be24-972f-4252-aa16-aeb2eab7ecd6"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1476, 28, 1)"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","capa=\"conv6\"\n","# Cargar la red neuronal 1D previamente entrenada\n","model = tf.keras.models.load_model('/content/modelo.h5')\n","\n","# Seleccionar la capa de interés (por ejemplo, la última capa antes de la salida)\n","target_layer = model.get_layer(capa)\n","\n","# Definir una función que calcule Grad-CAM\n","@tf.function\n","def compute_gradcam(input_image):\n","    with tf.GradientTape() as tape:\n","        # Propagar hacia adelante la imagen de entrada a través de la red\n","        outputs = model(input_image)\n","        # Obtener la salida de la capa de interés\n","        output = target_layer.output\n","        # Calcular el gradiente de la clase objetivo (por ejemplo, la clase con la predicción máxima)\n","        gradient = tape.gradient(outputs, output)\n","        # Calcular los mapas de calor Grad-CAM\n","        gradcam = tf.reduce_sum(gradient * output, axis=-1)\n","\n","    return gradcam\n","\n","# Cargar una secuencia de entrada de ejemplo (debe estar en el formato adecuado)\n","input_sequence = X_train[0]\n","\n","# Expandir las dimensiones para que coincidan con las expectativas del modelo\n","input_sequence = np.expand_dims(input_sequence, axis=0)\n","\n","\n","# Calcular Grad-CAM para la secuencia de entrada\n","gradcam = compute_gradcam(input_sequence)\n","\n","# Normalizar Grad-CAM para obtener un mapa de calor\n","gradcam = (gradcam - tf.reduce_min(gradcam)) / (tf.reduce_max(gradcam) - tf.reduce_min(gradcam))\n","\n","# Visualizar el mapa de calor\n","plt.imshow(gradcam[0], cmap='jet')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":661},"id":"TxlU7dGmjQxw","executionInfo":{"status":"error","timestamp":1698535285506,"user_tz":300,"elapsed":3623,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"db5eecad-697e-4791-d414-7554afb4a4bf"},"execution_count":18,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-09234cffc92c>\u001b[0m in \u001b[0;36m<cell line: 34>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;31m# Calcular Grad-CAM para la secuencia de entrada\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m \u001b[0mgradcam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_gradcam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_sequence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;31m# Normalizar Grad-CAM para obtener un mapa de calor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/__autograph_generated_file4m65fhsk.py\u001b[0m in \u001b[0;36mtf__compute_gradcam\u001b[0;34m(input_image)\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUndefinedReturnValue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGradientTape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtape\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m                     \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_image\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m                     \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_layer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m                     \u001b[0mgradient\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/engine/input_spec.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[0;34m(input_spec, inputs, layer_name)\u001b[0m\n\u001b[1;32m    296\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mspec_dim\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mspec_dim\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 298\u001b[0;31m                         raise ValueError(\n\u001b[0m\u001b[1;32m    299\u001b[0m                             \u001b[0;34mf'Input {input_index} of layer \"{layer_name}\" is '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    300\u001b[0m                             \u001b[0;34m\"incompatible with the layer: \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"<ipython-input-18-09234cffc92c>\", line 16, in compute_gradcam  *\n        outputs = model(input_image)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py\", line 70, in error_handler  **\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.10/dist-packages/keras/engine/input_spec.py\", line 298, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Input 0 of layer \"model_5\" is incompatible with the layer: expected shape=(None, 27, 1), found shape=(1, 28, 1)\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","capa=\"conv1d_6\"\n","# Cargar la red neuronal 1D previamente entrenada\n","model = tf.keras.models.load_model('/content/modelo_completo.h5')\n","\n","# Seleccionar la capa de interés (por ejemplo, la última capa antes de la salida)\n","target_layer = model.get_layer(capa)\n","\n","\n","\n","# Definir una función que calcule Grad-CAM\n","@tf.function\n","def compute_gradcam(input_image):\n","    # Crear una función que obtenga la salida de la capa de interés\n","    target_fn = tf.keras.backend.function([model.input], [target_layer.output])\n","    # Obtener la salida de la capa de interés\n","    target_output = target_fn([input_image])[0]\n","\n","    # Calcular el gradiente de la clase objetivo (por ejemplo, la clase con la predicción máxima)\n","    gradient = tf.gradients(target_output, target_layer.output)[0]\n","\n","    # Calcular los mapas de calor Grad-CAM\n","    gradcam = tf.reduce_sum(gradient * target_layer.output, axis=-1)\n","\n","    return gradcam\n","\n","# Cargar una secuencia de entrada de ejemplo (debe estar en el formato adecuado)\n","input_sequence = X_train[0]\n","\n","# Expandir las dimensiones para que coincidan con las expectativas del modelo\n","input_sequence = np.expand_dims(input_sequence, axis=0)\n","\n","# Calcular Grad-CAM para la secuencia de entrada\n","gradcam = compute_gradcam(input_sequence)\n","\n","# Normalizar Grad-CAM para obtener un mapa de calor\n","gradcam = (gradcam - tf.reduce_min(gradcam)) / (tf.reduce_max(gradcam) - tf.reduce_min(gradcam))\n","\n","# Visualizar el mapa de calor\n","plt.imshow(tf.make_ndarray(gradcam)[0], cmap='jet')\n","plt.show()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"fvXs9ZavmyoU","executionInfo":{"status":"error","timestamp":1696723716078,"user_tz":300,"elapsed":1331,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"5fcff702-a6c5-43a0-e437-4ab75cfbb7d1"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-226-41899ee00e00>\u001b[0m in \u001b[0;36m<cell line: 37>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;31m# Calcular Grad-CAM para la secuencia de entrada\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m \u001b[0mgradcam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_gradcam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_sequence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;31m# Normalizar Grad-CAM para obtener un mapa de calor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/__autograph_generated_file_8lxqdi1.py\u001b[0m in \u001b[0;36mtf__compute_gradcam\u001b[0;34m(input_image)\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUndefinedReturnValue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m                 \u001b[0mtarget_fn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_layer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m                 \u001b[0mtarget_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_fn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_image\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m                 \u001b[0mgradient\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgradients\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_output\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_layer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0mgradcam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce_sum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgradient\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_layer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/backend.py\u001b[0m in \u001b[0;36mfunc\u001b[0;34m(model_inputs)\u001b[0m\n\u001b[1;32m   4661\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mwrap_outputs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4662\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4663\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msync_to_numpy_or_python_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4664\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4665\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/tf_utils.py\u001b[0m in \u001b[0;36msync_to_numpy_or_python_type\u001b[0;34m(tensors)\u001b[0m\n\u001b[1;32m    678\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 680\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_to_single_numpy_or_python_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtensors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    681\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    682\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/tf_utils.py\u001b[0m in \u001b[0;36m_to_single_numpy_or_python_type\u001b[0;34m(t)\u001b[0m\n\u001b[1;32m    671\u001b[0m         \u001b[0;31m# Don't turn ragged or sparse tensors to NumPy.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    672\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 673\u001b[0;31m             \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    674\u001b[0m         \u001b[0;31m# Strings, ragged and sparse tensors don't have .item(). Return them\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m         \u001b[0;31m# as-is.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: in user code:\n\n    File \"<ipython-input-226-41899ee00e00>\", line 20, in compute_gradcam  *\n        target_output = target_fn([input_image])[0]\n    File \"/usr/local/lib/python3.10/dist-packages/keras/backend.py\", line 4663, in func  **\n        return tf_utils.sync_to_numpy_or_python_type(outs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/utils/tf_utils.py\", line 680, in sync_to_numpy_or_python_type\n        return tf.nest.map_structure(_to_single_numpy_or_python_type, tensors)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/utils/tf_utils.py\", line 673, in _to_single_numpy_or_python_type\n        t = t.numpy()\n\n    AttributeError: 'Tensor' object has no attribute 'numpy'\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","capa = \"conv1d_6\"\n","# Cargar la red neuronal 1D previamente entrenada\n","model = tf.keras.models.load_model('/content/modelo_completo.h5')\n","\n","# Seleccionar la capa de interés (por ejemplo, la última capa antes de la salida)\n","target_layer = model.get_layer(capa)\n","\n","# Definir una función que calcule Grad-CAM\n","@tf.function\n","def compute_gradcam(input_image):\n","    # Crear una función que obtenga la salida de la capa de interés\n","    target_fn = tf.keras.backend.function([model.input], [target_layer.output])\n","    # Obtener la salida de la capa de interés\n","    target_output = target_fn([input_image])[0]\n","\n","    # Calcular el gradiente de la clase objetivo (por ejemplo, la clase con la predicción máxima)\n","    gradient = tf.gradients(target_output, target_layer.output)[0]\n","\n","    # Calcular los mapas de calor Grad-CAM\n","    gradcam = tf.reduce_sum(gradient * target_layer.output, axis=-1)\n","\n","    return gradcam\n","\n","# Cargar una secuencia de entrada de ejemplo (debe estar en el formato adecuado)\n","input_sequence = X_train[0]\n","\n","# Expandir las dimensiones para que coincidan con las expectativas del modelo\n","input_sequence = np.expand_dims(input_sequence, axis=0)\n","\n","# Calcular Grad-CAM para la secuencia de entrada\n","gradcam = compute_gradcam(input_sequence)\n","\n","# Normalizar Grad-CAM para obtener un mapa de calor\n","gradcam = (gradcam - tf.reduce_min(gradcam)) / (tf.reduce_max(gradcam) - tf.reduce_min(gradcam))\n","\n","# Visualizar el mapa de calor\n","plt.imshow(gradcam[0].numpy(), cmap='jet')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"odHSLj_cnefL","executionInfo":{"status":"error","timestamp":1696723761946,"user_tz":300,"elapsed":1214,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"6364e24c-ef9e-4090-be62-9709497a2b6f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-227-27a3c1daf15c>\u001b[0m in \u001b[0;36m<cell line: 35>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;31m# Calcular Grad-CAM para la secuencia de entrada\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m \u001b[0mgradcam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_gradcam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_sequence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;31m# Normalizar Grad-CAM para obtener un mapa de calor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/__autograph_generated_filez148veyv.py\u001b[0m in \u001b[0;36mtf__compute_gradcam\u001b[0;34m(input_image)\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUndefinedReturnValue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m                 \u001b[0mtarget_fn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_layer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m                 \u001b[0mtarget_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_fn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_image\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m                 \u001b[0mgradient\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgradients\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_output\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_layer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0mgradcam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce_sum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgradient\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget_layer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/backend.py\u001b[0m in \u001b[0;36mfunc\u001b[0;34m(model_inputs)\u001b[0m\n\u001b[1;32m   4661\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mwrap_outputs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4662\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4663\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msync_to_numpy_or_python_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4664\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4665\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/tf_utils.py\u001b[0m in \u001b[0;36msync_to_numpy_or_python_type\u001b[0;34m(tensors)\u001b[0m\n\u001b[1;32m    678\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 680\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_to_single_numpy_or_python_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtensors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    681\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    682\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/tf_utils.py\u001b[0m in \u001b[0;36m_to_single_numpy_or_python_type\u001b[0;34m(t)\u001b[0m\n\u001b[1;32m    671\u001b[0m         \u001b[0;31m# Don't turn ragged or sparse tensors to NumPy.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    672\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 673\u001b[0;31m             \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    674\u001b[0m         \u001b[0;31m# Strings, ragged and sparse tensors don't have .item(). Return them\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m         \u001b[0;31m# as-is.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: in user code:\n\n    File \"<ipython-input-224-bd161c7a734b>\", line 18, in compute_gradcam  *\n        target_output = target_fn([input_image])[0]\n    File \"/usr/local/lib/python3.10/dist-packages/keras/backend.py\", line 4663, in func  **\n        return tf_utils.sync_to_numpy_or_python_type(outs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/utils/tf_utils.py\", line 680, in sync_to_numpy_or_python_type\n        return tf.nest.map_structure(_to_single_numpy_or_python_type, tensors)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/utils/tf_utils.py\", line 673, in _to_single_numpy_or_python_type\n        t = t.numpy()\n\n    AttributeError: 'Tensor' object has no attribute 'numpy'\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","\n","def grad_cam(model, data_vector, category_index, conv_name, nb_classes):\n","\n","    # Obtener la salida de la última capa convolucional\n","    last_conv_layer = model.get_layer(conv_name)\n","    last_conv_output = last_conv_layer(data_vector)\n","\n","    # Calcular los gradientes de la salida del modelo con respecto a la salida de la última capa convolucional\n","    with tf.GradientTape() as tape:\n","        tape.watch(last_conv_output)\n","        predictions = model(data_vector)\n","        prediction_class = predictions[0, category_index]\n","\n","    # Obtener los pesos de los gradientes\n","    gradient = tape.gradient(prediction_class, last_conv_output)\n","    gradient = tf.reshape(gradient, (last_conv_output.shape[1], last_conv_output.shape[2]))\n","\n","    # Promediar los gradientes por canal\n","    channel_weights = tf.reduce_mean(gradient, axis=0)\n","\n","    # Asignar los pesos de los gradientes a la salida de la última capa convolucional\n","    heatmap = channel_weights * last_conv_output\n","\n","    # Normalizar la heatmap\n","    heatmap = tf.nn.relu(heatmap)\n","    heatmap = tf.nn.l2_normalize(heatmap, axis=1)\n","\n","    # Redimensionar la heatmap al tamaño del input\n","    heatmap = tf.expand_dims(heatmap, axis=0)\n","    heatmap = tf.squeeze(tf.image.resize(heatmap, data_vector.shape[1:]), axis=0)\n","\n","    return heatmap"],"metadata":{"id":"Obsd9pCpoBpn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = tf.keras.models.load_model('/content/modelo_completo.h5')\n","data_vector = X_test\n","category_index = 0\n","\n","heatmap = grad_cam(model, data_vector, category_index, 'conv1d_6', 4)\n","\n","# Visualizamos la heatmap\n","import matplotlib.pyplot as plt\n","\n","plt.imshow(heatmap)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":405},"id":"HZjn2l-YoC7F","executionInfo":{"status":"error","timestamp":1696724186736,"user_tz":300,"elapsed":2953,"user":{"displayName":"Sergio Alejandro Holguin","userId":"08501812585634864774"}},"outputId":"81e5d7c0-4a8c-46cf-ed80-406b682128c9"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-249-053fd08a5907>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mcategory_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mheatmap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrad_cam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_vector\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcategory_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'conv1d_6'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Visualizamos la heatmap\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-229-4804b030912b>\u001b[0m in \u001b[0;36mgrad_cam\u001b[0;34m(model, data_vector, category_index, conv_name, nb_classes)\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGradientTape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtape\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mtape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlast_conv_output\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m         \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_vector\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m         \u001b[0mprediction_class\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcategory_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/engine/input_spec.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[0;34m(input_spec, inputs, layer_name)\u001b[0m\n\u001b[1;32m    296\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mspec_dim\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mspec_dim\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 298\u001b[0;31m                         raise ValueError(\n\u001b[0m\u001b[1;32m    299\u001b[0m                             \u001b[0;34mf'Input {input_index} of layer \"{layer_name}\" is '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    300\u001b[0m                             \u001b[0;34m\"incompatible with the layer: \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input 0 of layer \"model_1\" is incompatible with the layer: expected shape=(None, 27, 1), found shape=(370, 28, 1)"]}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}